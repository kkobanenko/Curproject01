#!/bin/bash

# RAG Platform - –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã

set -e

echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RAG Platform..."
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "success")
            echo -e "${GREEN}‚úÖ${NC} $message"
            ;;
        "warning")
            echo -e "${YELLOW}‚ö†Ô∏è${NC} $message"
            ;;
        "error")
            echo -e "${RED}‚ùå${NC} $message"
            ;;
        "info")
            echo -e "${BLUE}‚ÑπÔ∏è${NC} $message"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if command -v docker &> /dev/null; then
    if docker info &> /dev/null; then
        print_status "success" "Docker –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
        print_status "info" "–í–µ—Ä—Å–∏—è: $(docker --version)"
    else
        print_status "error" "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        exit 1
    fi
else
    print_status "error" "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
if command -v docker-compose &> /dev/null; then
    print_status "success" "Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω"
    print_status "info" "–í–µ—Ä—Å–∏—è: $(docker-compose --version)"
else
    print_status "error" "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
echo ""
echo "üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
if command -v python3 &> /dev/null; then
    print_status "success" "Python3 –¥–æ—Å—Ç—É–ø–µ–Ω"
    print_status "info" "–í–µ—Ä—Å–∏—è: $(python3 --version)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if command -v pip3 &> /dev/null; then
        print_status "success" "pip3 –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_status "warning" "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
else
    print_status "error" "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
echo ""
echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ Git..."
if command -v git &> /dev/null; then
    print_status "success" "Git –¥–æ—Å—Ç—É–ø–µ–Ω"
    print_status "info" "–í–µ—Ä—Å–∏—è: $(git --version)"
else
    print_status "warning" "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Make
echo ""
echo "üî® –ü—Ä–æ–≤–µ—Ä–∫–∞ Make..."
if command -v make &> /dev/null; then
    print_status "success" "Make –¥–æ—Å—Ç—É–ø–µ–Ω"
    print_status "info" "–í–µ—Ä—Å–∏—è: $(make --version | head -n1)"
else
    print_status "warning" "Make –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
echo ""
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
required_dirs=(
    "apps/api"
    "apps/streamlit_app"
    "packages/rag_core"
    "infra/compose"
    "configs"
    "scripts"
)

for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        print_status "success" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_status "error" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo ""
echo "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
required_files=(
    "infra/compose/docker-compose.yml"
    "infra/compose/env.example"
    "configs/app.toml"
    "Makefile"
    "README.md"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        print_status "success" "–§–∞–π–ª $file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_status "error" "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
echo ""
echo "üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
if docker images | grep -q "rag-platform"; then
    print_status "success" "–û–±—Ä–∞–∑—ã RAG Platform –Ω–∞–π–¥–µ–Ω—ã"
    docker images | grep "rag-platform"
else
    print_status "info" "–û–±—Ä–∞–∑—ã RAG Platform –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ make build)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if docker ps | grep -q "rag-platform"; then
    print_status "success" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã RAG Platform –∑–∞–ø—É—â–µ–Ω—ã"
    docker ps | grep "rag-platform"
else
    print_status "info" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã RAG Platform –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ make up)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
ports_to_check=(
    "8080:Airflow"
    "8081:API"
    "8502:Streamlit"
    "5432:PostgreSQL"
    "6379:Redis"
    "8123:ClickHouse"
    "8088:Superset"
    "11434:Ollama"
)

for port_info in "${ports_to_check[@]}"; do
    port=$(echo "$port_info" | cut -d: -f1)
    service=$(echo "$port_info" | cut -d: -f2)
    
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        print_status "success" "–ü–æ—Ä—Ç $port ($service) –æ—Ç–∫—Ä—ã—Ç"
    else
        print_status "info" "–ü–æ—Ä—Ç $port ($service) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
    fi
done

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo ""
echo "üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:"

if [ "$(docker ps | grep -c 'rag-platform')" -gt 0 ]; then
    print_status "success" "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo ""
    echo "üöÄ RAG Platform –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  - Streamlit UI: http://localhost:8502"
    echo "  - API Docs: http://localhost:8081/docs"
    echo "  - Airflow: http://localhost:8080"
    echo "  - Superset: http://localhost:8088"
else
    print_status "warning" "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    echo ""
    echo "üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "  make init    - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
    echo "  make build   - —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
    echo "  make up      - –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
fi

echo ""
print_status "info" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
