# RAG Platform Makefile

.PHONY: help build up down logs clean test lint format

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = infra/compose/docker-compose.yml
ENV_FILE = infra/compose/.env.local

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Docker Compose –∫–æ–º–∞–Ω–¥—ã
up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üöÄ –ó–∞–ø—É—Å–∫ RAG Platform..."
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) up -d

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG Platform..."
	docker-compose -f $(COMPOSE_FILE) down

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) restart

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-api: ## –õ–æ–≥–∏ API
	docker-compose -f $(COMPOSE_FILE) logs -f api

logs-streamlit: ## –õ–æ–≥–∏ Streamlit
	docker-compose -f $(COMPOSE_FILE) logs -f streamlit

logs-airflow: ## –õ–æ–≥–∏ Airflow
	docker-compose -f $(COMPOSE_FILE) logs -f airflow-webserver

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	@echo "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) build

build-api: ## –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ API
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) build api

build-streamlit: ## –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ Streamlit
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) build streamlit

build-airflow: ## –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ Airflow
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) build airflow-webserver

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
dev: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üõ†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	./scripts/dev_start.sh

dev-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	./scripts/dev_stop.sh

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	./scripts/run_tests.sh

test-api: ## –¢–µ—Å—Ç—ã API
	cd apps/api && python3 test_basic.py

test-streamlit: ## –¢–µ—Å—Ç—ã Streamlit
	cd apps/streamlit_app && python3 test_basic.py

# –õ–∏–Ω—Ç–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞..."
	cd apps/api && ruff check src/
	cd apps/streamlit_app && ruff check src/

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	cd apps/api && ruff format src/
	cd apps/streamlit_app && ruff format src/

# –û—á–∏—Å—Ç–∫–∞
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	docker-compose -f $(COMPOSE_FILE) down -v --rmi all
	docker system prune -f

clean-volumes: ## –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–º–∞
	@echo "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–º–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) down -v

# –£—Ç–∏–ª–∏—Ç—ã
status: ## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose -f $(COMPOSE_FILE) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
	@echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã..."
	./scripts/health_check.sh

demo: ## –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
	@echo "üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG Platform..."
	./scripts/demo.sh

shell-api: ## Shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä API
	docker-compose -f $(COMPOSE_FILE) exec api bash

shell-streamlit: ## Shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Streamlit
	docker-compose -f $(COMPOSE_FILE) exec streamlit bash

shell-airflow: ## Shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Airflow
	docker-compose -f $(COMPOSE_FILE) exec airflow-webserver bash

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG Platform..."
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env.local..."; \
		cp infra/compose/env.example $(ENV_FILE); \
		echo "‚ö†Ô∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ $(ENV_FILE) –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"; \
	fi
	@echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
	mkdir -p data/inbox uploads
	@echo "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤..."
	docker stats --no-stream

# –ë—ç–∫–∞–ø
backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
	mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec postgres pg_dump -U postgres rag_app > backups/rag_app_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ backups/"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
	@echo "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@if [ -z "$(file)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: make restore file=backups/filename.sql"; \
		exit 1; \
	fi
	docker-compose -f $(COMPOSE_FILE) exec -T postgres psql -U postgres rag_app < $(file)
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
