#!/usr/bin/env python3
"""
Test for Airflow DAGs
"""

import sys
from pathlib import Path

# Add the package to Python path
sys.path.insert(0, str(Path(__file__).parent))

def test_ingest_dag_import():
    """Test ingest documents DAG import"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DAG
        from dags.ingest_documents_dag import dag
        
        print(f"‚úÖ Ingest DAG imported successfully: {dag.dag_id}")
        print(f"   Schedule: {dag.schedule_interval}")
        print(f"   Tags: {dag.tags}")
        print(f"   Tasks: {len(dag.tasks)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if dag.dag_id == 'ingest_documents':
            print("   ‚úÖ DAG ID is correct")
        else:
            print("   ‚ùå DAG ID is incorrect")
            return False
        
        if dag.schedule_interval == '*/15 * * * *':
            print("   ‚úÖ Schedule interval is correct (every 15 minutes)")
        else:
            print("   ‚ùå Schedule interval is incorrect")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Ingest DAG import test failed: {e}")
        return False

def test_process_dag_import():
    """Test process and index DAG import"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DAG
        from dags.process_and_index_dag import dag
        
        print(f"‚úÖ Process DAG imported successfully: {dag.dag_id}")
        print(f"   Schedule: {dag.schedule_interval}")
        print(f"   Tags: {dag.tags}")
        print(f"   Tasks: {len(dag.tasks)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if dag.dag_id == 'process_and_index_documents':
            print("   ‚úÖ DAG ID is correct")
        else:
            print("   ‚ùå DAG ID is incorrect")
            return False
        
        if dag.schedule_interval == '0 */1 * * *':
            print("   ‚úÖ Schedule interval is correct (every hour)")
        else:
            print("   ‚ùå Schedule interval is incorrect")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Process DAG import test failed: {e}")
        return False

def test_dag_structure():
    """Test DAG structure and dependencies"""
    try:
        from dags.ingest_documents_dag import dag as ingest_dag
        from dags.process_and_index_dag import dag as process_dag
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ingest DAG
        print("Testing Ingest DAG structure...")
        
        expected_tasks = [
            'start', 'discover_documents', 'validate_documents', 
            'process_documents', 'update_processing_status', 
            'cleanup_temp_files', 'generate_report', 'end'
        ]
        
        actual_tasks = [task.task_id for task in ingest_dag.tasks]
        
        for expected_task in expected_tasks:
            if expected_task in actual_tasks:
                print(f"   ‚úÖ Task {expected_task} exists")
            else:
                print(f"   ‚ùå Task {expected_task} missing")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É process DAG
        print("Testing Process DAG structure...")
        
        expected_tasks = [
            'start', 'get_pending_documents', 'parse_documents',
            'extract_tables', 'create_chunks', 'generate_embeddings',
            'index_to_vectorstore', 'update_processing_status',
            'generate_report', 'end'
        ]
        
        actual_tasks = [task.task_id for task in process_dag.tasks]
        
        for expected_task in expected_tasks:
            if expected_task in actual_tasks:
                print(f"   ‚úÖ Task {expected_task} exists")
            else:
                print(f"   ‚ùå Task {expected_task} missing")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå DAG structure test failed: {e}")
        return False

def test_task_operators():
    """Test task operators and types"""
    try:
        from dags.ingest_documents_dag import dag as ingest_dag
        from dags.process_and_index_dag import dag as process_dag
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ ingest DAG
        print("Testing Ingest DAG operators...")
        
        for task in ingest_dag.tasks:
            if task.task_id in ['start', 'end']:
                if hasattr(task, 'operator_class') and 'EmptyOperator' in str(task.operator_class):
                    print(f"   ‚úÖ Task {task.task_id} is EmptyOperator")
                else:
                    print(f"   ‚ùå Task {task.task_id} is not EmptyOperator")
                    return False
            else:
                if hasattr(task, 'operator_class') and 'PythonOperator' in str(task.operator_class):
                    print(f"   ‚úÖ Task {task.task_id} is PythonOperator")
                else:
                    print(f"   ‚ùå Task {task.task_id} is not PythonOperator")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ process DAG
        print("Testing Process DAG operators...")
        
        for task in process_dag.tasks:
            if task.task_id in ['start', 'end']:
                if hasattr(task, 'operator_class') and 'EmptyOperator' in str(task.operator_class):
                    print(f"   ‚úÖ Task {task.task_id} is EmptyOperator")
                else:
                    print(f"   ‚ùå Task {task.task_id} is not EmptyOperator")
                    return False
            else:
                if hasattr(task, 'operator_class') and 'PythonOperator' in str(task.operator_class):
                    print(f"   ‚úÖ Task {task.task_id} is PythonOperator")
                else:
                    print(f"   ‚ùå Task {task.task_id} is not PythonOperator")
                    return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Task operators test failed: {e}")
        return False

def test_dag_configuration():
    """Test DAG configuration and settings"""
    try:
        from dags.ingest_documents_dag import dag as ingest_dag
        from dags.process_and_index_dag import dag as process_dag
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ingest DAG
        print("Testing Ingest DAG configuration...")
        
        if ingest_dag.max_active_runs == 1:
            print("   ‚úÖ Max active runs is 1")
        else:
            print("   ‚ùå Max active runs is not 1")
            return False
        
        if ingest_dag.catchup is False:
            print("   ‚úÖ Catchup is disabled")
        else:
            print("   ‚ùå Catchup is enabled")
            return False
        
        if ingest_dag.owner == 'rag-platform':
            print("   ‚úÖ Owner is correct")
        else:
            print("   ‚ùå Owner is incorrect")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é process DAG
        print("Testing Process DAG configuration...")
        
        if process_dag.max_active_runs == 1:
            print("   ‚úÖ Max active runs is 1")
        else:
            print("   ‚ùå Max active runs is not 1")
            return False
        
        if process_dag.catchup is False:
            print("   ‚úÖ Catchup is disabled")
        else:
            print("   ‚ùå Catchup is enabled")
            return False
        
        if process_dag.owner == 'rag-platform':
            print("   ‚úÖ Owner is correct")
        else:
            print("   ‚ùå Owner is incorrect")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå DAG configuration test failed: {e}")
        return False

def test_function_imports():
    """Test that all required functions can be imported"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ ingest DAG
        print("Testing Ingest DAG function imports...")
        
        from dags.ingest_documents_dag import (
            discover_new_documents,
            validate_document,
            process_document_with_rag,
            update_processing_status,
            cleanup_temp_files,
            generate_processing_report
        )
        
        print("   ‚úÖ All ingest DAG functions imported successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ process DAG
        print("Testing Process DAG function imports...")
        
        from dags.process_and_index_dag import (
            get_pending_documents,
            parse_documents,
            extract_tables,
            create_chunks,
            generate_embeddings,
            index_to_vectorstore,
            update_processing_status,
            generate_processing_report
        )
        
        print("   ‚úÖ All process DAG functions imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Function imports test failed: {e}")
        return False

def main():
    """Run all DAG tests"""
    print("üß™ Testing Airflow DAGs...\n")
    
    tests = [
        ("Ingest DAG Import", test_ingest_dag_import),
        ("Process DAG Import", test_process_dag_import),
        ("DAG Structure", test_dag_structure),
        ("Task Operators", test_task_operators),
        ("DAG Configuration", test_dag_configuration),
        ("Function Imports", test_function_imports),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"Testing {test_name}...")
        if test_func():
            passed += 1
        print()
    
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All DAG tests passed!")
        print("\nüìã New Airflow capabilities:")
        print("   ‚úÖ Document discovery and validation")
        print("   ‚úÖ RAG Core integration")
        print("   ‚úÖ Document parsing and table extraction")
        print("   ‚úÖ Chunking and embedding generation")
        print("   ‚úÖ Vector store indexing")
        print("   ‚úÖ Comprehensive reporting and monitoring")
        print("   ‚úÖ Error handling and retry logic")
        return 0
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the errors above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
