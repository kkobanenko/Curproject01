"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""
import streamlit as st
import requests
import json
from typing import List, Dict, Any, Optional
import os
from datetime import datetime
import time

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from components.auth import LoginForm, UserProfile
from components.search import SearchForm, SearchResults
from components.chat import ChatInterface
from components.upload import DocumentUploader
from components.documents import DocumentList
from components.document_preview import DocumentPreview
from components.table_visualizer import TableVisualizer
from components.query_history import QueryHistory
from components.export_manager import ExportManager
from components.user_settings import UserSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG Platform",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "current_conversation" not in st.session_state:
    st.session_state.current_conversation = None

if "access_token" not in st.session_state:
    st.session_state.access_token = None

if "user_info" not in st.session_state:
    st.session_state.user_info = None

if "is_authenticated" not in st.session_state:
    st.session_state.is_authenticated = False


def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False








def search_documents(query: str, top_k: int = 20, token: str = None) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
            
        response = requests.post(
            f"{API_BASE_URL}/api/v1/search",
            json={"query": query, "top_k": top_k},
            headers=headers
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}


def chat_with_rag(message: str, top_k: int = 5, token: str = None) -> Dict[str, Any]:
    """–ß–∞—Ç —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
            
        response = requests.post(
            f"{API_BASE_URL}/api/v1/answers/generate",
            json={
                "question": message,
                "top_k": top_k,
                "include_citations": True
            },
            headers=headers
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status_code}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}


def upload_document(file, title: str = None, token: str = None) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        files = {"file": file}
        data = {"title": title} if title else {}
        
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
        
        response = requests.post(
            f"{API_BASE_URL}/api/v1/documents/upload",
            files=files,
            data=data,
            headers=headers
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}


def get_documents(page: int = 1, size: int = 20, token: str = None) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
            
        response = requests.get(
            f"{API_BASE_URL}/api/v1/documents",
            params={"page": page, "size": size},
            headers=headers
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.status_code}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}


def get_user_info(token: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{API_BASE_URL}/api/v1/auth/me",
            headers=headers
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}


def show_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    login_form = LoginForm(API_BASE_URL)
    result = login_form.render()
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        st.session_state.access_token = result["access_token"]
        st.session_state.is_authenticated = True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(result["access_token"])
        if "error" not in user_info:
            st.session_state.user_info = user_info
        
        st.success("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        time.sleep(1)
        st.rerun()


def show_main_interface():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_info —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not hasattr(st.session_state, 'user_info') or not st.session_state.user_info:
        st.error("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        st.session_state.clear()
        st.rerun()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = UserProfile(st.session_state.user_info)
    user_profile.render_header()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
            ["üè† –ì–ª–∞–≤–Ω–∞—è", "üîç –ü–æ–∏—Å–∫", "üí¨ –ß–∞—Ç", "üì§ –ó–∞–≥—Ä—É–∑–∫–∞", "üìö –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üìö –ò—Å—Ç–æ—Ä–∏—è", "üíæ –≠–∫—Å–ø–æ—Ä—Ç", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        )
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.subheader("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        try:
            health_response = requests.get(f"{API_BASE_URL}/health")
            if health_response.status_code == 200:
                health_data = health_response.json()
                st.success(f"‚úÖ {health_data['status']}")
                if health_data.get('details'):
                    for service, status in health_data['details'].items():
                        icon = "‚úÖ" if status else "‚ùå"
                        st.text(f"{icon} {service}")
            else:
                st.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        except:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        user_profile.render_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üîç –ü–æ–∏—Å–∫":
        show_search_page()
    elif page == "üí¨ –ß–∞—Ç":
        show_chat_page()
    elif page == "üì§ –ó–∞–≥—Ä—É–∑–∫–∞":
        show_upload_page()
    elif page == "üìö –î–æ–∫—É–º–µ–Ω—Ç—ã":
        show_documents_page()
    elif page == "üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä":
        show_document_preview_page()
    elif page == "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
        show_table_visualization_page()
    elif page == "üìö –ò—Å—Ç–æ—Ä–∏—è":
        show_query_history_page()
    elif page == "üíæ –≠–∫—Å–ø–æ—Ä—Ç":
        show_export_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    st.header("üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RAG Platform")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            value="0",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            delta="+0"
        )
    
    with col2:
        st.metric(
            label="üîç –ü–æ–∏—Å–∫–æ–≤",
            value="0",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            delta="+0"
        )
    
    with col3:
        st.metric(
            label="üí¨ –°–æ–æ–±—â–µ–Ω–∏–π",
            value="0",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            delta="+0"
        )
    
    with col4:
        st.metric(
            label="‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
            value="0.5s",  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            delta="-0.1s"
        )
    
    st.divider()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", use_container_width=True):
            st.switch_page("üîç –ü–æ–∏—Å–∫")
    
    with col2:
        if st.button("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", use_container_width=True):
            st.switch_page("üí¨ –ß–∞—Ç")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    st.subheader("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏
    st.subheader("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏")
    st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


def show_search_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞"""
    search_form = SearchForm(API_BASE_URL, st.session_state.access_token)
    results = search_form.render()
    
    if results:
        search_results = SearchResults(results)
        search_results.render()


def show_chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    chat_interface = ChatInterface(API_BASE_URL, st.session_state.access_token)
    chat_interface.render()


def show_upload_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document_uploader = DocumentUploader(API_BASE_URL, st.session_state.access_token)
    document_uploader.render()


def show_documents_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document_list = DocumentList(API_BASE_URL, st.session_state.access_token)
    document_list.render()


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_info —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not hasattr(st.session_state, 'user_info') or not st.session_state.user_info:
        st.error("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        st.session_state.clear()
        st.rerun()
        return
    
    user_settings = UserSettings(API_BASE_URL, st.session_state.access_token)
    user_settings.render()


def show_document_preview_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    st.header("üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    documents_response = get_documents(token=st.session_state.access_token)
    
    if "error" in documents_response:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents_response['error']}")
        return
    
    documents = documents_response.get('items', [])
    
    if not documents:
        st.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    # –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    selected_doc = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        documents,
        format_func=lambda x: f"{x.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({x.get('file_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
    )
    
    if selected_doc:
        document_preview = DocumentPreview(API_BASE_URL, st.session_state.access_token)
        document_preview.render(selected_doc['id'], selected_doc)


def show_table_visualization_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    documents_response = get_documents(token=st.session_state.access_token)
    
    if "error" in documents_response:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents_response['error']}")
        return
    
    documents = documents_response.get('items', [])
    
    if not documents:
        st.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    # –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    selected_doc = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏",
        documents,
        format_func=lambda x: f"{x.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({x.get('file_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
    )
    
    if selected_doc:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            headers = {"Authorization": f"Bearer {st.session_state.access_token}"}
            response = requests.get(
                f"{API_BASE_URL}/api/v1/documents/{selected_doc['id']}/content",
                headers=headers
            )
            
            if response.status_code == 200:
                content = response.json()
                
                if content.get('tables'):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    for i, table in enumerate(content['tables']):
                        st.subheader(f"üìä –¢–∞–±–ª–∏—Ü–∞ {i+1}")
                        
                        table_visualizer = TableVisualizer()
                        table_visualizer.render(table, {
                            'id': f"{selected_doc['id']}_table_{i}",
                            'title': f"–¢–∞–±–ª–∏—Ü–∞ {i+1} –∏–∑ {selected_doc.get('title', '–î–æ–∫—É–º–µ–Ω—Ç–∞')}",
                            'source': selected_doc.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'rows': len(table.get('data', [])),
                            'columns': len(table.get('data', [[]])[0]) if table.get('data') else 0
                        })
                        
                        st.divider()
                else:
                    st.info("üì≠ –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")


def show_query_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query_history = QueryHistory(API_BASE_URL, st.session_state.access_token)
    query_history.render()


def show_export_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        ["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
    )
    
    if export_type == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞":
        st.info("üîç –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, –∑–∞—Ç–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        if search_query and st.button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"):
            results = search_documents(search_query, token=st.session_state.access_token)
            if "error" not in results:
                export_manager = ExportManager()
                export_manager.render(results.get('items', []), "search_results", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    
    elif export_type == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤":
        st.info("üìö –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        export_manager = ExportManager()
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
        export_manager.render([], "query_history", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    elif export_type == "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        st.info("üìö –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        documents_response = get_documents(token=st.session_state.access_token)
        if "error" not in documents_response:
            export_manager = ExportManager()
            export_manager.render(documents_response.get('items', []), "documents", "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    elif export_type == "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        st.info("üë§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        export_manager = ExportManager()
        export_manager.render(st.session_state.user_info, "user_data", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if not check_api_health():
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω.")
        st.stop()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not st.session_state.is_authenticated:
        show_login_page()
    else:
        show_main_interface()


if __name__ == "__main__":
    main()
