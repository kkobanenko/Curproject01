"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""
import streamlit as st
import requests
import json
from typing import List, Dict, Any
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8081")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG Platform",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "current_conversation" not in st.session_state:
    st.session_state.current_conversation = None


def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False


def search_documents(query: str, top_k: int = 20) -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/v1/search",
            json={"query": query, "top_k": top_k}
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"Search failed: {response.status_code}"}
    except Exception as e:
        return {"error": f"Search error: {str(e)}"}


def chat_with_rag(message: str, top_k: int = 5) -> Dict[str, Any]:
    """–ß–∞—Ç —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/v1/chat",
            json={
                "message": message,
                "top_k": top_k,
                "use_context": True
            }
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"Chat failed: {response.status_code}"}
    except Exception as e:
        return {"error": f"Chat error: {str(e)}"}


def upload_document(file, title: str = None) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        files = {"file": file}
        data = {"title": title} if title else {}
        
        response = requests.post(
            f"{API_BASE_URL}/api/v1/upload",
            files=files,
            data=data
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"Upload failed: {response.status_code}"}
    except Exception as e:
        return {"error": f"Upload error: {str(e)}"}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üîç RAG Platform")
    st.markdown("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if not check_api_health():
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω.")
        st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
            ["–ü–æ–∏—Å–∫", "–ß–∞—Ç", "–ó–∞–≥—Ä—É–∑–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        )
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.subheader("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        try:
            health_response = requests.get(f"{API_BASE_URL}/health")
            if health_response.status_code == 200:
                health_data = health_response.json()
                st.success(f"‚úÖ {health_data['status']}")
                if health_data.get('details'):
                    for service, status in health_data['details'].items():
                        icon = "‚úÖ" if status else "‚ùå"
                        st.text(f"{icon} {service}")
            else:
                st.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        except:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "–ü–æ–∏—Å–∫":
        show_search_page()
    elif page == "–ß–∞—Ç":
        show_chat_page()
    elif page == "–ó–∞–≥—Ä—É–∑–∫–∞":
        show_upload_page()
    elif page == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
        show_documents_page()


def show_search_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞"""
    st.header("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    with st.form("search_form"):
        col1, col2 = st.columns([3, 1])
        
        with col1:
            query = st.text_input(
                "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
                help="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ"
            )
        
        with col2:
            top_k = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", min_value=1, max_value=100, value=20)
        
        submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏", use_container_width=True)
    
    if submitted and query:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."):
            results = search_documents(query, top_k)
            
            if "error" in results:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {results['error']}")
            else:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {results['total']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, result in enumerate(results['results']):
                    with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['score']:.3f})"):
                        col1, col2 = st.columns([1, 3])
                        
                        with col1:
                            st.write(f"**–¢–∏–ø:** {result['kind']}")
                            st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {result.get('page_no', 'N/A')}")
                        
                        with col2:
                            if result['kind'] == 'table':
                                st.write("**–¢–∞–±–ª–∏—Ü–∞:**")
                                st.html(result.get('table_html', ''))
                            else:
                                st.write("**–¢–µ–∫—Å—Ç:**")
                                st.write(result.get('content', '')[:500] + "..." if len(result.get('content', '')) > 500 else result.get('content', ''))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results['processing_time']:.3f} —Å–µ–∫")


def show_chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    st.header("üí¨ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞
    col1, col2 = st.columns([3, 1])
    
    with col1:
        user_message = st.text_input(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...",
            key="user_input"
        )
    
    with col2:
        top_k = st.number_input("–ö–æ–Ω—Ç–µ–∫—Å—Ç", min_value=1, max_value=20, value=5)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if st.button("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True) and user_message:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.chat_history.append({
            "role": "user",
            "content": user_message
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç..."):
            response = chat_with_rag(user_message, top_k)
            
            if "error" in response:
                st.error(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response['error']}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "role": "assistant",
                    "content": response['message']
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –±–µ—Å–µ–¥—ã
                st.session_state.current_conversation = response['conversation_id']
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã")
    
    if not st.session_state.chat_history:
        st.info("–ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    else:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.chat_message("user").write(message["content"])
            else:
                st.chat_message("assistant").write(message["content"])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.chat_history = []
            st.session_state.current_conversation = None
            st.rerun()


def show_upload_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    with st.form("upload_form"):
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            type=['pdf', 'docx', 'xlsx', 'html', 'txt', 'jpg', 'jpeg', 'png'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, XLSX, HTML, TXT, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        
        submitted = st.form_submit_button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", use_container_width=True)
    
    if submitted and uploaded_file:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç..."):
            result = upload_document(uploaded_file, title)
            
            if "error" in result:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['error']}")
            else:
                st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**ID —Ñ–∞–π–ª–∞:** {result['file_id']}")
                    st.write(f"**–ò–º—è —Ñ–∞–π–ª–∞:** {result['filename']}")
                
                with col2:
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {result['size']} –±–∞–π—Ç")
                    st.write(f"**–¢–∏–ø:** {result['mime_type']}")
                
                st.info("–î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ–∫—É–º–µ–Ω—Ç—ã'.")


def show_documents_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    st.header("üìö –î–æ–∫—É–º–µ–Ω—Ç—ã")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    col1, col2 = st.columns([2, 1])
    
    with col1:
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
    
    with col2:
        size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", [10, 20, 50, 100])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/v1/documents",
            params={"page": page, "size": size}
        )
        
        if response.status_code == 200:
            data = response.json()
            
            st.success(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data['total']}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for doc in data['documents']:
                with st.expander(f"üìÑ {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"):
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.write(f"**ID:** {doc['id']}")
                        st.write(f"**–ü—É—Ç—å:** {doc.get('source_path', 'N/A')}")
                        st.write(f"**–¢–∏–ø:** {doc.get('mime_type', 'N/A')}")
                        st.write(f"**–ß–∞–Ω–∫–æ–≤:** {doc.get('chunk_count', 0)}")
                    
                    with col2:
                        st.write(f"**–†–∞–∑–º–µ—Ä:** {doc.get('size_bytes', 'N/A')} –±–∞–π—Ç")
                        st.write(f"**–ó–∞–≥—Ä—É–∂–µ–Ω:** {doc['created_at']}")
                        st.write(f"**SHA256:** {doc['sha256'][:16]}...")
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{doc['id']}"):
                            st.info("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    
                    with col2:
                        if st.button(f"üîç –ß–∞–Ω–∫–∏", key=f"chunks_{doc['id']}"):
                            st.info("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞–Ω–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    
                    with col3:
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{doc['id']}"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if data['pages'] > 1:
                st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {data['page']} –∏–∑ {data['pages']}")
        
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.status_code}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()
