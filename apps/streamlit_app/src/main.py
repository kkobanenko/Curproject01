"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫, —á–∞—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import streamlit as st
import requests
import json
from typing import List, Dict, Any
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG Platform",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8081")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ RAG Platform")
    st.markdown("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
            ["üè† –ì–ª–∞–≤–Ω–∞—è", "üîç –ü–æ–∏—Å–∫", "üí¨ RAG –ß–∞—Ç", "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        )
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        st.subheader("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            check_services_status()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üîç –ü–æ–∏—Å–∫":
        show_search_page()
    elif page == "üí¨ RAG –ß–∞—Ç":
        show_chat_page()
    elif page == "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã":
        show_documents_page()
    elif page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()

def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RAG Platform!")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        st.markdown("""
        - **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫** –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        - **RAG —á–∞—Ç** —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        - **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        - **OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–∫–∞–Ω–æ–≤
        - **–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü** —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        """)
    
    with col2:
        st.subheader("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
        st.markdown("""
        - **PDF** (–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏ —Å–∫–∞–Ω—ã)
        - **DOCX** (Word –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        - **XLSX** (Excel —Ç–∞–±–ª–∏—Ü—ã)
        - **HTML** (–≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        - **EML** (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞)
        - **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** (JPG, PNG, TIFF)
        """)
    
    st.divider()
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
    st.subheader("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
    quick_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç—á–µ—Ç –∑–∞ 2024 –≥–æ–¥")
    
    if st.button("–ù–∞–π—Ç–∏"):
        if quick_query:
            perform_search(quick_query)
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")

def show_search_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞"""
    st.header("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
    
    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    with st.form("search_form"):
        col1, col2 = st.columns([3, 1])
        
        with col1:
            query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        with col2:
            top_k = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", min_value=1, max_value=50, value=10)
        
        submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏")
        
        if submitted and query:
            perform_search(query, top_k)
    
    st.divider()
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    if "search_history" not in st.session_state:
        st.session_state.search_history = []
    
    if st.session_state.search_history:
        st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")
        for i, (query, timestamp) in enumerate(st.session_state.search_history[-5:]):
            if st.button(f"üîç {query[:50]}...", key=f"history_{i}"):
                perform_search(query, top_k)

def show_chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ RAG —á–∞—Ç–∞"""
    st.header("üí¨ RAG –ß–∞—Ç")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.chat_message("user").write(message["content"])
            else:
                st.chat_message("assistant").write(message["content"])
    
    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_input = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...")
    
    if user_input:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
            response = generate_rag_response(user_input)
            
            if response:
                st.session_state.chat_history.append({"role": "assistant", "content": response})
                st.chat_message("assistant").write(response)
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")

def show_documents_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    st.header("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        type=["pdf", "docx", "xlsx", "html", "eml", "jpg", "jpeg", "png", "tiff"],
        accept_multiple_files=True
    )
    
    if uploaded_files:
        if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
            upload_documents(uploaded_files)
    
    st.divider()
    
    # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    st.subheader("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
        load_documents_list()

def show_statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        load_statistics()

def perform_search(query: str, top_k: int = 10):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    try:
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫..."):
            response = requests.post(
                f"{API_BASE_URL}/api/v1/search",
                json={"query": query, "top_k": top_k}
            )
            
            if response.status_code == 200:
                results = response.json()
                display_search_results(results)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if "search_history" not in st.session_state:
                    st.session_state.search_history = []
                st.session_state.search_history.append((query, "now"))
                
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")

def display_search_results(results: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    st.subheader(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(results)} –Ω–∞–π–¥–µ–Ω–æ)")
    
    for i, result in enumerate(results):
        with st.expander(f"üìÑ {result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–°—Ö–æ–∂–µ—Å—Ç—å: {result.get('score', 0):.2f})"):
            st.markdown(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {result.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')}")
            
            if result.get('table_html'):
                st.markdown("**–¢–∞–±–ª–∏—Ü–∞:**")
                st.html(result.get('table_html'))
            
            st.markdown(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {result.get('page_no', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            st.markdown(f"**–¢–∏–ø:** {result.get('kind', 'text')}")

def generate_rag_response(query: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RAG –æ—Ç–≤–µ—Ç–∞"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/v1/chat",
            json={"message": query}
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("response", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def upload_documents(files):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        with st.spinner("üì§ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
            for file in files:
                files_data = {"file": (file.name, file.getvalue(), file.type)}
                
                response = requests.post(
                    f"{API_BASE_URL}/api/v1/upload",
                    files=files_data
                )
                
                if response.status_code == 200:
                    st.success(f"‚úÖ {file.name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file.name}: {response.status_code}")
                    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

def load_documents_list():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/v1/documents")
        
        if response.status_code == 200:
            documents = response.json()
            st.dataframe(documents)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: {response.status_code}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def load_statistics():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/v1/stats")
        
        if response.status_code == 200:
            stats = response.json()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–î–æ–∫—É–º–µ–Ω—Ç—ã", stats.get("vector_store", {}).get("total_documents", 0))
            
            with col2:
                st.metric("–ß–∞–Ω–∫–∏", stats.get("vector_store", {}).get("total_chunks", 0))
            
            with col3:
                st.metric("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏", stats.get("vector_store", {}).get("total_embeddings", 0))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.json(stats)
            
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def check_services_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        
        if response.status_code == 200:
            health = response.json()
            status = health.get("status", "unknown")
            
            if status == "healthy":
                st.success("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            elif status == "degraded":
                st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                st.error("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –î–µ—Ç–∞–ª–∏
            details = health.get("details", {})
            for service, status in details.items():
                if status:
                    st.success(f"‚úÖ {service}")
                else:
                    st.error(f"‚ùå {service}")
                    
        else:
            st.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

if __name__ == "__main__":
    main()
