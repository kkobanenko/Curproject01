"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import streamlit as st
import pandas as pd
import json
from typing import Dict, Any, Optional, List
import requests
import base64
from io import BytesIO

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False

try:
    from docx import Document
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

try:
    import openpyxl
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

try:
    from bs4 import BeautifulSoup
    BS4_AVAILABLE = True
except ImportError:
    BS4_AVAILABLE = False

try:
    import xml.etree.ElementTree as ET
    XML_AVAILABLE = True
except ImportError:
    XML_AVAILABLE = False

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

import re


class DocumentPreview:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
        self.supported_formats = {
            'pdf': self._preview_pdf,
            'docx': self._preview_docx,
            'xlsx': self._preview_xlsx,
            'html': self._preview_html,
            'txt': self._preview_text,
            'json': self._preview_json,
            'xml': self._preview_xml,
            'csv': self._preview_csv,
            'png': self._preview_image,
            'jpg': self._preview_image,
            'jpeg': self._preview_image,
            'gif': self._preview_image,
            'bmp': self._preview_image,
            'tiff': self._preview_image,
            'webp': self._preview_image
        }
    
    def render(self, document_id: str, document_info: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        st.header(f"üìÑ {document_info.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self._render_metadata(document_info)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º/—Ä–∞–∑–¥–µ–ª–∞–º
        if document_info.get('total_pages', 1) > 1:
            self._render_page_navigation(document_info)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self._render_content_preview(document_id, document_info)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self._render_actions(document_id, document_info)
    
    def _render_metadata(self, document_info: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        with st.expander("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                st.write(f"‚Ä¢ –¢–∏–ø: {document_info.get('file_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä: {document_info.get('file_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω: {document_info.get('uploaded_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ê–≤—Ç–æ—Ä: {document_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            with col2:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                st.write(f"‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {document_info.get('total_pages', 1)}")
                st.write(f"‚Ä¢ –ß–∞–Ω–∫–æ–≤: {document_info.get('chunks_count', 0)}")
                st.write(f"‚Ä¢ –°–ª–æ–≤: {document_info.get('word_count', 0)}")
                st.write(f"‚Ä¢ –¢–∞–±–ª–∏—Ü: {document_info.get('tables_count', 0)}")
    
    def _render_page_navigation(self, document_info: Dict[str, Any]):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        total_pages = document_info.get('total_pages', 1)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            current_page = st.selectbox(
                "–°—Ç—Ä–∞–Ω–∏—Ü–∞",
                range(1, total_pages + 1),
                index=0,
                key=f"page_select_{document_info.get('id')}"
            )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = current_page / total_pages
        st.progress(progress)
        st.caption(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")
    
    def _render_content_preview(self, document_id: str, document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        file_type = document_info.get('file_type', '').lower()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        content = self._get_document_content(document_id)
        
        if not content:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_method = self.supported_formats.get(file_type, self._preview_generic)
        preview_method(content, document_info)
    
    def _get_document_content(self, document_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ API"""
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/documents/{document_id}/content",
                headers=headers
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            return None
    
    def _preview_pdf(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        if content.get('text'):
            with st.expander("üìù –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", expanded=True):
                st.text_area(
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value=content['text'],
                    height=300,
                    disabled=True,
                    key=f"pdf_text_{document_info.get('id')}"
                )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if content.get('tables'):
            st.subheader("üìä –¢–∞–±–ª–∏—Ü—ã")
            for i, table in enumerate(content['tables']):
                with st.expander(f"–¢–∞–±–ª–∏—Ü–∞ {i+1}", expanded=False):
                    if table.get('data'):
                        df = pd.DataFrame(table['data'])
                        st.dataframe(df, use_container_width=True)
                    
                    if table.get('html'):
                        st.components.v1.html(table['html'], height=400)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if content.get('images'):
            st.subheader("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            for i, image in enumerate(content['images']):
                if image.get('data'):
                    try:
                        img_data = base64.b64decode(image['data'])
                        st.image(img_data, caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
                    except:
                        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}")
    
    def _preview_docx(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ DOCX")
        
        if content.get('text'):
            with st.expander("üìù –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", expanded=True):
                st.text_area(
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value=content['text'],
                    height=300,
                    disabled=True,
                    key=f"docx_text_{document_info.get('id')}"
                )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if content.get('tables'):
            st.subheader("üìä –¢–∞–±–ª–∏—Ü—ã")
            for i, table in enumerate(content['tables']):
                with st.expander(f"–¢–∞–±–ª–∏—Ü–∞ {i+1}", expanded=False):
                    if table.get('data'):
                        df = pd.DataFrame(table['data'])
                        st.dataframe(df, use_container_width=True)
    
    def _preview_xlsx(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä XLSX –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ XLSX")
        
        if content.get('sheets'):
            # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞
            sheet_names = list(content['sheets'].keys())
            selected_sheet = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç",
                sheet_names,
                key=f"sheet_select_{document_info.get('id')}"
            )
            
            if selected_sheet and content['sheets'][selected_sheet]:
                sheet_data = content['sheets'][selected_sheet]
                
                if isinstance(sheet_data, list) and len(sheet_data) > 0:
                    df = pd.DataFrame(sheet_data)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                        st.dataframe(df, use_container_width=True)
                    
                    with col2:
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—Å—Ç–∞
                        st.metric("–°—Ç—Ä–æ–∫", len(df))
                        st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))
                        st.metric("–Ø—á–µ–µ–∫", len(df) * len(df.columns))
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
                        numeric_cols = df.select_dtypes(include=['number']).columns
                        if len(numeric_cols) > 0:
                            st.write("**–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
                            for col in numeric_cols[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                st.write(f"‚Ä¢ {col}")
                        
                        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        missing_data = df.isnull().sum().sum()
                        if missing_data > 0:
                            st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {missing_data}")
                        else:
                            st.success("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    with st.expander("üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                        if len(numeric_cols) > 0:
                            st.write("**–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                            st.dataframe(df[numeric_cols].describe())
                        
                        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if len(numeric_cols) > 1:
                            st.write("**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:**")
                            corr_matrix = df[numeric_cols].corr()
                            st.dataframe(corr_matrix)
                else:
                    st.info("–õ–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ XLSX —Ñ–∞–π–ª–∞")
    
    def _preview_html(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üåê –°–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML")
        
        if content.get('html'):
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è HTML
            with st.expander("üëÅÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", expanded=True):
                st.components.v1.html(content['html'], height=600)
            
            # –ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if BS4_AVAILABLE:
                try:
                    soup = BeautifulSoup(content['html'], 'html.parser')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HTML
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–¢–µ–≥–æ–≤", len(soup.find_all()))
                    
                    with col2:
                        st.metric("–°—Å—ã–ª–æ–∫", len(soup.find_all('a')))
                    
                    with col3:
                        st.metric("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", len(soup.find_all('img')))
                    
                    with col4:
                        st.metric("–¢–∞–±–ª–∏—Ü", len(soup.find_all('table')))
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    links = soup.find_all('a', href=True)
                    if links:
                        with st.expander("üîó –°—Å—ã–ª–∫–∏", expanded=False):
                            for i, link in enumerate(links[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                                st.write(f"{i+1}. [{link.get_text().strip()}]({link['href']})")
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    images = soup.find_all('img', src=True)
                    if images:
                        with st.expander("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", expanded=False):
                            for i, img in enumerate(images[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                st.write(f"{i+1}. {img['src']}")
                                if img.get('alt'):
                                    st.caption(f"Alt: {img['alt']}")
                    
                    # –¢–∞–±–ª–∏—Ü—ã
                    tables = soup.find_all('table')
                    if tables:
                        with st.expander("üìä –¢–∞–±–ª–∏—Ü—ã", expanded=False):
                            for i, table in enumerate(tables):
                                st.write(f"**–¢–∞–±–ª–∏—Ü–∞ {i+1}:**")
                                try:
                                    df = pd.read_html(str(table))[0]
                                    st.dataframe(df, use_container_width=True)
                                except:
                                    st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É")
                                
                except Exception as e:
                    st.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {str(e)}")
            
            # –ò—Å—Ö–æ–¥–Ω—ã–π HTML –∫–æ–¥
            with st.expander("üîç –ò—Å—Ö–æ–¥–Ω—ã–π HTML", expanded=False):
                st.code(content['html'], language='html')
        
        if content.get('text'):
            with st.expander("üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", expanded=False):
                st.text_area(
                    "–¢–µ–∫—Å—Ç",
                    value=content['text'],
                    height=200,
                    disabled=True
                )
    
    def _preview_text(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        if content.get('text'):
            st.text_area(
                "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                value=content['text'],
                height=400,
                disabled=True,
                key=f"text_content_{document_info.get('id')}"
            )
    
    def _preview_json(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üîß –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON")
        
        if content.get('data'):
            st.json(content['data'])
        
        if content.get('text'):
            with st.expander("üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", expanded=False):
                st.text_area(
                    "JSON —Ç–µ–∫—Å—Ç",
                    value=content['text'],
                    height=200,
                    disabled=True
                )
    
    def _preview_generic(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        st.subheader("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞–∫ JSON
        try:
            st.json(content)
        except:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            if content.get('text'):
                st.text_area(
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    value=content['text'],
                    height=300,
                    disabled=True
                )
            else:
                st.info("–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    def _render_actions(self, document_id: str, document_info: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        st.divider()
        st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì• –°–∫–∞—á–∞—Ç—å", key=f"download_{document_id}"):
                self._download_document(document_id, document_info)
        
        with col2:
            if st.button("üîç –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ", key=f"search_in_{document_id}"):
                self._search_in_document(document_id)
        
        with col3:
            if st.button("üìä –ê–Ω–∞–ª–∏–∑", key=f"analyze_{document_id}"):
                self._analyze_document(document_id, document_info)
        
        with col4:
            if st.button("üí¨ –ß–∞—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É", key=f"chat_{document_id}"):
                self._chat_about_document(document_id, document_info)
    
    def _download_document(self, document_id: str, document_info: Dict[str, Any]):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/documents/{document_id}/download",
                headers=headers
            )
            
            if response.status_code == 200:
                filename = document_info.get('title', f'document_{document_id}')
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                    data=response.content,
                    file_name=filename,
                    mime=response.headers.get('content-type', 'application/octet-stream'),
                    key=f"download_btn_{document_id}"
                )
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _search_in_document(self, document_id: str):
        """–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        st.info("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def _analyze_document(self, document_id: str, document_info: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.info("üìä –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def _chat_about_document(self, document_id: str, document_info: Dict[str, Any]):
        """–ß–∞—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        st.info("üí¨ –§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def _preview_xml(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä XML –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üîß –°–æ–¥–µ—Ä–∂–∏–º–æ–µ XML")
        
        if content.get('xml') or content.get('text'):
            xml_content = content.get('xml', content.get('text', ''))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XML
            if XML_AVAILABLE:
                try:
                    root = ET.fromstring(xml_content)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ XML
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–≠–ª–µ–º–µ–Ω—Ç–æ–≤", len(root.findall('.//')))
                    
                    with col2:
                        st.metric("–ê—Ç—Ä–∏–±—É—Ç–æ–≤", len(root.findall('.//[@*]')))
                    
                    with col3:
                        st.metric("–£—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏", self._get_xml_depth(root))
                    
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ XML
                    with st.expander("üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ XML", expanded=False):
                        self._display_xml_structure(root)
                    
                except ET.ParseError as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {str(e)}")
            
            # –ò—Å—Ö–æ–¥–Ω—ã–π XML –∫–æ–¥
            with st.expander("üîç –ò—Å—Ö–æ–¥–Ω—ã–π XML", expanded=True):
                st.code(xml_content, language='xml')
        else:
            st.warning("XML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _preview_csv(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä CSV –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        st.subheader("üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV")
        
        if content.get('text') or content.get('data'):
            csv_content = content.get('text', '')
            
            if csv_content:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    import csv as csv_module
                    from io import StringIO
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    separators = [',', ';', '\t', '|']
                    best_separator = ','
                    best_score = 0
                    
                    for sep in separators:
                        try:
                            reader = csv_module.reader(StringIO(csv_content), delimiter=sep)
                            rows = list(reader)
                            if len(rows) > 1 and len(rows[0]) > 1:
                                score = len(rows[0])
                                if score > best_score:
                                    best_score = score
                                    best_separator = sep
                        except:
                            continue
                    
                    # –ß–∏—Ç–∞–µ–º CSV —Å –ª—É—á—à–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                    df = pd.read_csv(StringIO(csv_content), sep=best_separator)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.dataframe(df, use_container_width=True)
                    
                    with col2:
                        st.metric("–°—Ç—Ä–æ–∫", len(df))
                        st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))
                        st.metric("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", best_separator)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                        st.write("**–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**")
                        for col in df.columns:
                            dtype = str(df[col].dtype)
                            st.write(f"‚Ä¢ {col}: {dtype}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    with st.expander("üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                        numeric_cols = df.select_dtypes(include=['number']).columns
                        if len(numeric_cols) > 0:
                            st.write("**–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                            st.dataframe(df[numeric_cols].describe())
                        
                        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        missing_data = df.isnull().sum()
                        if missing_data.sum() > 0:
                            st.write("**–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
                            st.dataframe(missing_data[missing_data > 0])
                        else:
                            st.success("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV: {str(e)}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", value=csv_content, height=300, disabled=True)
            else:
                st.warning("CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _preview_image(self, content: Dict[str, Any], document_info: Dict[str, Any]):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        st.subheader("üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        if content.get('image_data') or content.get('data'):
            image_data = content.get('image_data', content.get('data', ''))
            
            try:
                if isinstance(image_data, str):
                    # Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if image_data.startswith('data:image'):
                        # –£–±–∏—Ä–∞–µ–º data URL –ø—Ä–µ—Ñ–∏–∫—Å
                        image_data = image_data.split(',')[1]
                    
                    img_bytes = base64.b64decode(image_data)
                else:
                    img_bytes = image_data
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                st.image(img_bytes, caption=document_info.get('title', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                if PIL_AVAILABLE:
                    try:
                        img = Image.open(BytesIO(img_bytes))
                        
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("–®–∏—Ä–∏–Ω–∞", f"{img.width}px")
                        
                        with col2:
                            st.metric("–í—ã—Å–æ—Ç–∞", f"{img.height}px")
                        
                        with col3:
                            st.metric("–§–æ—Ä–º–∞—Ç", img.format)
                        
                        with col4:
                            st.metric("–†–µ–∂–∏–º", img.mode)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        with st.expander("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
                            st.write(f"**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {len(img_bytes)} –±–∞–π—Ç")
                            st.write(f"**–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:** {img.width/img.height:.2f}")
                            
                            if hasattr(img, '_getexif') and img._getexif():
                                st.write("**EXIF –¥–∞–Ω–Ω—ã–µ:**")
                                exif = img._getexif()
                                for tag, value in exif.items():
                                    st.write(f"‚Ä¢ {tag}: {value}")
                    
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {str(e)}")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _get_xml_depth(self, element, depth=0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã XML"""
        if not element:
            return depth
        
        max_depth = depth
        for child in element:
            child_depth = self._get_xml_depth(child, depth + 1)
            max_depth = max(max_depth, child_depth)
        
        return max_depth
    
    def _display_xml_structure(self, element, level=0):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML"""
        indent = "  " * level
        tag_name = element.tag
        attributes = " ".join([f'{k}="{v}"' for k, v in element.attrib.items()])
        
        if attributes:
            st.write(f"{indent}<{tag_name} {attributes}>")
        else:
            st.write(f"{indent}<{tag_name}>")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π
        if level < 3:
            for child in element[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–µ—Ç–µ–π
                self._display_xml_structure(child, level + 1)
        
        if level == 0 and len(element) > 5:
            st.write(f"{indent}  ... –∏ –µ—â–µ {len(element) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
