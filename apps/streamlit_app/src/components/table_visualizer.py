"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from typing import Dict, Any, List, Optional
import json
from io import BytesIO


class TableVisualizer:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.chart_types = {
            'line': self._create_line_chart,
            'bar': self._create_bar_chart,
            'scatter': self._create_scatter_chart,
            'pie': self._create_pie_chart,
            'histogram': self._create_histogram,
            'box': self._create_box_plot,
            'heatmap': self._create_heatmap,
            '3d_scatter': self._create_3d_scatter,
            'area': self._create_area_chart,
            'violin': self._create_violin_plot
        }
    
    def render(self, table_data: Dict[str, Any], table_info: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        st.header(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
        self._render_table_info(table_info)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
        df = self._prepare_dataframe(table_data)
        
        if df is None or df.empty:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self._render_main_visualization(df, table_info)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        self._render_additional_charts(df, table_info)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
        self._render_statistics(df, table_info)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        self._render_export_options(df, table_info)
    
    def _render_table_info(self, table_info: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        with st.expander("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä: {table_info.get('rows', 0)} √ó {table_info.get('columns', 0)}")
                st.write(f"‚Ä¢ –¢–∏–ø: {table_info.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {table_info.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            with col2:
                st.write("**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:**")
                st.write(f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {table_info.get('completeness', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {table_info.get('uniqueness', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {table_info.get('consistency', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    def _prepare_dataframe(self, table_data: Dict[str, Any]) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if isinstance(table_data, list):
                return pd.DataFrame(table_data)
            elif isinstance(table_data, dict) and 'data' in table_data:
                return pd.DataFrame(table_data['data'])
            elif isinstance(table_data, dict) and 'rows' in table_data:
                return pd.DataFrame(table_data['rows'])
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã")
                return None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DataFrame: {str(e)}")
            return None
    
    def _render_main_visualization(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        st.subheader("üìà –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            list(self.chart_types.keys()),
            key=f"main_chart_{table_info.get('id', 'default')}"
        )
        
        # –í—ã–±–æ—Ä –æ—Å–µ–π
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
        
        if chart_type in ['line', 'bar', 'scatter', 'area']:
            col1, col2 = st.columns(2)
            
            with col1:
                x_axis = st.selectbox("–û—Å—å X", df.columns.tolist(), key=f"x_axis_{chart_type}")
            
            with col2:
                if numeric_columns:
                    y_axis = st.selectbox("–û—Å—å Y", numeric_columns, key=f"y_axis_{chart_type}")
                else:
                    y_axis = None
                    st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Å–∏ Y")
        
        elif chart_type == 'pie':
            value_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–π", numeric_columns if numeric_columns else df.columns.tolist())
            label_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –º–µ—Ç–æ–∫", categorical_columns if categorical_columns else df.columns.tolist())
        
        elif chart_type == 'histogram':
            column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", numeric_columns if numeric_columns else df.columns.tolist())
        
        elif chart_type == 'box':
            column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è box plot", numeric_columns if numeric_columns else df.columns.tolist())
        
        elif chart_type == 'heatmap':
            st.info("–î–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
        
        elif chart_type == '3d_scatter':
            col1, col2, col3 = st.columns(3)
            with col1:
                x_axis = st.selectbox("–û—Å—å X", numeric_columns if numeric_columns else df.columns.tolist())
            with col2:
                y_axis = st.selectbox("–û—Å—å Y", numeric_columns if numeric_columns else df.columns.tolist())
            with col3:
                z_axis = st.selectbox("–û—Å—å Z", numeric_columns if numeric_columns else df.columns.tolist())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        if chart_type in self.chart_types:
            try:
                if chart_type in ['line', 'bar', 'scatter', 'area'] and y_axis:
                    fig = self.chart_types[chart_type](df, x_axis, y_axis, table_info)
                elif chart_type == 'pie':
                    fig = self.chart_types[chart_type](df, label_column, value_column, table_info)
                elif chart_type in ['histogram', 'box']:
                    fig = self.chart_types[chart_type](df, column, table_info)
                elif chart_type == 'heatmap':
                    fig = self.chart_types[chart_type](df, table_info)
                elif chart_type == '3d_scatter':
                    fig = self.chart_types[chart_type](df, x_axis, y_axis, z_axis, table_info)
                else:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                    return
                
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
                    self._render_chart_settings(fig)
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    def _create_line_chart(self, df: pd.DataFrame, x_col: str, y_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig = px.line(df, x=x_col, y=y_col, title=f"–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {y_col} –ø–æ {x_col}")
        fig.update_layout(
            xaxis_title=x_col,
            yaxis_title=y_col,
            hovermode='x unified'
        )
        return fig
    
    def _create_bar_chart(self, df: pd.DataFrame, x_col: str, y_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig = px.bar(df, x=x_col, y=y_col, title=f"–°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫: {y_col} –ø–æ {x_col}")
        fig.update_layout(
            xaxis_title=x_col,
            yaxis_title=y_col
        )
        return fig
    
    def _create_scatter_chart(self, df: pd.DataFrame, x_col: str, y_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig = px.scatter(df, x=x_col, y=y_col, title=f"–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {y_col} vs {x_col}")
        fig.update_layout(
            xaxis_title=x_col,
            yaxis_title=y_col
        )
        return fig
    
    def _create_pie_chart(self, df: pd.DataFrame, label_col: str, value_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        fig = px.pie(df, names=label_col, values=value_col, title=f"–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {value_col}")
        return fig
    
    def _create_histogram(self, df: pd.DataFrame, column: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã"""
        fig = px.histogram(df, x=column, title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {column}")
        fig.update_layout(
            xaxis_title=column,
            yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞"
        )
        return fig
    
    def _create_box_plot(self, df: pd.DataFrame, column: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ box plot"""
        fig = px.box(df, y=column, title=f"Box Plot: {column}")
        fig.update_layout(
            yaxis_title=column
        )
        return fig
    
    def _create_heatmap(self, df: pd.DataFrame, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        numeric_df = df.select_dtypes(include=[np.number])
        if numeric_df.empty:
            st.error("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")
            return None
        
        corr_matrix = numeric_df.corr()
        fig = px.imshow(
            corr_matrix,
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
            color_continuous_scale='RdBu',
            aspect='auto'
        )
        fig.update_layout(
            xaxis_title="–°—Ç–æ–ª–±—Ü—ã",
            yaxis_title="–°—Ç–æ–ª–±—Ü—ã"
        )
        return fig
    
    def _create_3d_scatter(self, df: pd.DataFrame, x_col: str, y_col: str, z_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ 3D —Ç–æ—á–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig = px.scatter_3d(
            df, 
            x=x_col, 
            y=y_col, 
            z=z_col, 
            title=f"3D –≥—Ä–∞—Ñ–∏–∫: {x_col} vs {y_col} vs {z_col}"
        )
        return fig
    
    def _create_area_chart(self, df: pd.DataFrame, x_col: str, y_col: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        fig = px.area(df, x=x_col, y=y_col, title=f"–ü–ª–æ—â–∞–¥–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫: {y_col} –ø–æ {x_col}")
        fig.update_layout(
            xaxis_title=x_col,
            yaxis_title=y_col
        )
        return fig
    
    def _create_violin_plot(self, df: pd.DataFrame, column: str, table_info: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ violin plot"""
        fig = px.violin(df, y=column, title=f"Violin Plot: {column}")
        fig.update_layout(
            yaxis_title=column
        )
        return fig
    
    def _render_chart_settings(self, fig: go.Figure):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞"""
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                # –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
                height = st.slider("–í—ã—Å–æ—Ç–∞", 400, 800, 500, 50)
                fig.update_layout(height=height)
                
                # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
                color_schemes = ['plotly', 'plotly_dark', 'plotly_white', 'ggplot2', 'seaborn']
                color_scheme = st.selectbox("–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞", color_schemes)
                fig.update_layout(template=color_scheme)
            
            with col2:
                # –ü–æ–∫–∞–∑ –ª–µ–≥–µ–Ω–¥—ã
                show_legend = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É", value=True)
                fig.update_layout(showlegend=show_legend)
                
                # –ê–Ω–∏–º–∞—Ü–∏—è
                enable_animation = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é", value=False)
                if enable_animation:
                    fig.update_layout(
                        updatemenus=[{
                            'buttons': [
                                {'label': 'Play', 'method': 'animate', 'args': [None]}
                            ],
                            'direction': 'left',
                            'pad': {'r': 10, 't': 87},
                            'showactive': False,
                            'type': 'buttons',
                            'x': 0.1,
                            'xanchor': 'right',
                            'y': 0,
                            'yanchor': 'top'
                        }]
                    )
    
    def _render_additional_charts(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
        st.subheader("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", value=False):
            self._render_auto_analysis(df, table_info)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        if st.checkbox("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤", value=False):
            self._render_column_comparison(df, table_info)
    
    def _render_auto_analysis(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        st.subheader("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        
        numeric_df = df.select_dtypes(include=[np.number])
        categorical_df = df.select_dtypes(include=['object'])
        
        if not numeric_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            st.write("**–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
            st.dataframe(numeric_df.describe())
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if len(numeric_df.columns) <= 4:
                fig = make_subplots(
                    rows=2, cols=2,
                    subplot_titles=numeric_df.columns.tolist()
                )
                
                for i, col in enumerate(numeric_df.columns):
                    row = (i // 2) + 1
                    col_idx = (i % 2) + 1
                    
                    fig.add_trace(
                        go.Histogram(x=numeric_df[col], name=col),
                        row=row, col=col_idx
                    )
                
                fig.update_layout(height=600, title_text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
                st.plotly_chart(fig, use_container_width=True)
        
        if not categorical_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
            for col in categorical_df.columns:
                value_counts = categorical_df[col].value_counts()
                if len(value_counts) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    fig = px.pie(
                        values=value_counts.values,
                        names=value_counts.index,
                        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}"
                    )
                    st.plotly_chart(fig, use_container_width=True)
    
    def _render_column_comparison(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤"""
        st.subheader("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        
        if len(numeric_columns) >= 2:
            col1, col2 = st.columns(2)
            
            with col1:
                col_x = st.selectbox("–°—Ç–æ–ª–±–µ—Ü X", numeric_columns, key="comp_x")
            
            with col2:
                col_y = st.selectbox("–°—Ç–æ–ª–±–µ—Ü Y", numeric_columns, key="comp_y")
            
            if col_x != col_y:
                # Scatter plot
                fig = px.scatter(df, x=col_x, y=col_y, title=f"{col_x} vs {col_y}")
                st.plotly_chart(fig, use_container_width=True)
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                correlation = df[col_x].corr(df[col_y])
                st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", f"{correlation:.3f}")
    
    def _render_statistics(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑"""
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.write("**–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
            st.dataframe(df.describe())
        
        with col2:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
            st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:**")
            
            buffer = BytesIO()
            df.info(buf=buffer)
            info_str = buffer.getvalue().decode()
            
            st.text_area("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value=info_str, height=200, disabled=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            missing_data = df.isnull().sum()
            if missing_data.sum() > 0:
                st.write("**–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
                st.dataframe(missing_data[missing_data > 0])
            else:
                st.success("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
    
    def _render_export_options(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # CSV
            csv = df.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"{table_info.get('title', 'table')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Excel
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Sheet1', index=False)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                data=buffer.getvalue(),
                file_name=f"{table_info.get('title', 'table')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        with col3:
            # JSON
            json_str = df.to_json(orient='records', indent=2)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json_str,
                file_name=f"{table_info.get('title', 'table')}.json",
                mime="application/json"
            )
