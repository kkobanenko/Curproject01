"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
"""
import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional
import json
from io import BytesIO


class TableVisualizer:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.chart_types = {
            'line': 'üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
            'bar': 'üìä –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞', 
            'scatter': 'üîµ –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
            'pie': 'ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
            'histogram': 'üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞',
            'box': 'üì¶ Box Plot',
            'heatmap': 'üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
            'area': 'üìà –û–±–ª–∞—Å—Ç–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
            'violin': 'üéª –°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
            'density': 'üåä –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è',
            'correlation': 'üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞',
            'trend': 'üìà –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑'
        }
    
    def render(self, table_data: Dict[str, Any], table_info: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        st.header(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
        self._render_table_info(table_info)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
        df = self._prepare_dataframe(table_data)
        
        if df is None or df.empty:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self._render_main_visualization(df, table_info)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        self._render_additional_charts(df, table_info)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
        self._render_statistics(df, table_info)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        self._render_export_options(df, table_info)
    
    def _render_table_info(self, table_info: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        with st.expander("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä: {table_info.get('rows', 0)} √ó {table_info.get('columns', 0)}")
                st.write(f"‚Ä¢ –¢–∏–ø: {table_info.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {table_info.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            with col2:
                st.write("**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:**")
                st.write(f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {table_info.get('completeness', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {table_info.get('uniqueness', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {table_info.get('consistency', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    def _prepare_dataframe(self, table_data: Dict[str, Any]) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if isinstance(table_data, list):
                return pd.DataFrame(table_data)
            elif isinstance(table_data, dict) and 'data' in table_data:
                return pd.DataFrame(table_data['data'])
            elif isinstance(table_data, dict) and 'rows' in table_data:
                return pd.DataFrame(table_data['rows'])
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã")
                return None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DataFrame: {str(e)}")
            return None
    
    def _render_main_visualization(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        st.subheader("üìà –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            list(self.chart_types.keys()),
            format_func=lambda x: self.chart_types[x],
            key=f"main_chart_{table_info.get('id', 'default')}"
        )
        
        # –í—ã–±–æ—Ä –æ—Å–µ–π
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
        
        if chart_type in ['line', 'bar', 'scatter', 'area']:
            col1, col2 = st.columns(2)
            
            with col1:
                x_axis = st.selectbox("–û—Å—å X", df.columns.tolist(), key=f"x_axis_{chart_type}")
            
            with col2:
                if numeric_columns:
                    y_axis = st.selectbox("–û—Å—å Y", numeric_columns, key=f"y_axis_{chart_type}")
                else:
                    y_axis = None
                    st.warning("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Å–∏ Y")
            
            if y_axis:
                self._create_simple_chart(df, x_axis, y_axis, chart_type)
        
        elif chart_type == 'pie':
            if numeric_columns and categorical_columns:
                value_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–π", numeric_columns)
                label_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –º–µ—Ç–æ–∫", categorical_columns)
                self._create_pie_chart(df, label_column, value_column)
        
        elif chart_type == 'histogram':
            if numeric_columns:
                column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", numeric_columns)
                self._create_histogram(df, column)
        
        elif chart_type == 'box':
            if numeric_columns:
                column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è box plot", numeric_columns)
                self._create_box_plot(df, column)
        
        elif chart_type == 'heatmap':
            if len(numeric_columns) > 1:
                self._create_heatmap(df)
            else:
                st.warning("–î–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞")
        
        elif chart_type == 'violin':
            if numeric_columns:
                column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–∫—Ä–∏–ø–∏—á–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã", numeric_columns)
                self._create_violin_plot(df, column)
        
        elif chart_type == 'density':
            if numeric_columns:
                column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", numeric_columns)
                self._create_density_plot(df, column)
        
        elif chart_type == 'correlation':
            if len(numeric_columns) > 1:
                self._create_correlation_matrix(df)
            else:
                st.warning("–î–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞")
        
        elif chart_type == 'trend':
            if len(numeric_columns) > 0:
                self._create_trend_analysis(df, numeric_columns)
            else:
                st.warning("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω—É–∂–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
    
    def _create_simple_chart(self, df: pd.DataFrame, x_col: str, y_col: str, chart_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é Streamlit"""
        chart_data = pd.DataFrame({
            'x': df[x_col],
            'y': df[y_col]
        })
        
        if chart_type == 'line':
            st.line_chart(chart_data.set_index('x'))
        elif chart_type == 'bar':
            st.bar_chart(chart_data.set_index('x'))
        elif chart_type == 'scatter':
            st.scatter_chart(chart_data, x='x', y='y')
        elif chart_type == 'area':
            st.area_chart(chart_data.set_index('x'))
    
    def _create_pie_chart(self, df: pd.DataFrame, label_col: str, value_col: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        grouped_data = df.groupby(label_col)[value_col].sum().reset_index()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        st.write("**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:**")
        st.dataframe(grouped_data)
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
        for _, row in grouped_data.iterrows():
            percentage = (row[value_col] / grouped_data[value_col].sum()) * 100
            st.write(f"‚Ä¢ {row[label_col]}: {row[value_col]} ({percentage:.1f}%)")
    
    def _create_histogram(self, df: pd.DataFrame, column: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        st.write(f"**–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column}**")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{df[column].min():.2f}")
        with col2:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df[column].mean():.2f}")
        with col3:
            st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df[column].max():.2f}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        st.bar_chart(df[column].value_counts().sort_index())
    
    def _create_box_plot(self, df: pd.DataFrame, column: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ box plot"""
        st.write(f"**Box Plot –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column}**")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = df[column].describe()
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Q1", f"{stats['25%']:.2f}")
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{stats['50%']:.2f}")
        with col3:
            st.metric("Q3", f"{stats['75%']:.2f}")
        with col4:
            st.metric("IQR", f"{stats['75%'] - stats['25%']:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
        Q1 = stats['25%']
        Q3 = stats['75%']
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]
        if not outliers.empty:
            st.write(f"**–í—ã–±—Ä–æ—Å—ã ({len(outliers)}):**")
            st.dataframe(outliers)
    
    def _create_heatmap(self, df: pd.DataFrame):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        numeric_df = df.select_dtypes(include=[np.number])
        
        if numeric_df.empty:
            st.error("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")
            return
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        corr_matrix = numeric_df.corr()
        
        st.write("**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:**")
        st.dataframe(corr_matrix)
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        st.write("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:**")
        for i, col1 in enumerate(corr_matrix.columns):
            for j, col2 in enumerate(corr_matrix.columns):
                if i < j:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                    corr_value = corr_matrix.loc[col1, col2]
                    if abs(corr_value) > 0.7:
                        strength = "—Å–∏–ª—å–Ω–∞—è"
                    elif abs(corr_value) > 0.3:
                        strength = "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
                    else:
                        strength = "—Å–ª–∞–±–∞—è"
                    
                    if corr_value > 0:
                        direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è"
                    else:
                        direction = "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
                    
                    st.write(f"‚Ä¢ {col1} ‚Üî {col2}: {corr_value:.3f} ({strength} {direction} –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)")
    
    def _render_additional_charts(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
        st.subheader("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", value=False):
            self._render_auto_analysis(df, table_info)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        if st.checkbox("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤", value=False):
            self._render_column_comparison(df, table_info)
    
    def _render_auto_analysis(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        st.subheader("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        
        numeric_df = df.select_dtypes(include=[np.number])
        categorical_df = df.select_dtypes(include=['object'])
        
        if not numeric_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            st.write("**–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
            st.dataframe(numeric_df.describe())
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if len(numeric_df.columns) <= 4:
                st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤:**")
                for col in numeric_df.columns:
                    st.write(f"**{col}:**")
                    st.bar_chart(numeric_df[col].value_counts().sort_index())
        
        if not categorical_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
            for col in categorical_df.columns:
                value_counts = categorical_df[col].value_counts()
                if len(value_counts) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    st.write(f"**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}**")
                    st.bar_chart(value_counts)
    
    def _render_column_comparison(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤"""
        st.subheader("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        
        if len(numeric_columns) >= 2:
            col1, col2 = st.columns(2)
            
            with col1:
                col_x = st.selectbox("–°—Ç–æ–ª–±–µ—Ü X", numeric_columns, key="comp_x")
            
            with col2:
                col_y = st.selectbox("–°—Ç–æ–ª–±–µ—Ü Y", numeric_columns, key="comp_y")
            
            if col_x != col_y:
                # Scatter plot
                chart_data = pd.DataFrame({
                    'x': df[col_x],
                    'y': df[col_y]
                })
                st.scatter_chart(chart_data, x='x', y='y')
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                correlation = df[col_x].corr(df[col_y])
                st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", f"{correlation:.3f}")
    
    def _render_statistics(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑"""
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.write("**–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
            st.dataframe(df.describe())
        
        with col2:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
            st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:**")
            
            buffer = BytesIO()
            df.info(buf=buffer)
            info_str = buffer.getvalue().decode()
            
            st.text_area("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value=info_str, height=200, disabled=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            missing_data = df.isnull().sum()
            if missing_data.sum() > 0:
                st.write("**–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
                st.dataframe(missing_data[missing_data > 0])
            else:
                st.success("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
    
    def _render_export_options(self, df: pd.DataFrame, table_info: Dict[str, Any]):
        """–û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # CSV
            csv = df.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"{table_info.get('title', 'table')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Excel (—Ç—Ä–µ–±—É–µ—Ç openpyxl)
            try:
                buffer = BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='Sheet1', index=False)
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                    data=buffer.getvalue(),
                    file_name=f"{table_info.get('title', 'table')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            except ImportError:
                st.warning("üì• –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openpyxl: `pip install openpyxl`")
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Excel (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                    data="",
                    file_name="",
                    disabled=True
                )
        
        with col3:
            # JSON
            json_str = df.to_json(orient='records', indent=2)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json_str,
                file_name=f"{table_info.get('title', 'table')}.json",
                mime="application/json"
            )
    
    def _create_violin_plot(self, df: pd.DataFrame, column: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø–∏—á–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        st.write(f"**–°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column}**")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = df[column].describe()
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{stats['mean']:.2f}")
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{stats['50%']:.2f}")
        with col3:
            st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{stats['std']:.2f}")
        with col4:
            st.metric("–†–∞–∑–º–∞—Ö", f"{stats['max'] - stats['min']:.2f}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:**")
        st.bar_chart(df[column].value_counts().sort_index())
        
        # –ö–≤–∞—Ä—Ç–∏–ª–∏
        Q1 = stats['25%']
        Q2 = stats['50%']
        Q3 = stats['75%']
        IQR = Q3 - Q1
        
        st.write("**–ö–≤–∞—Ä—Ç–∏–ª–∏:**")
        st.write(f"‚Ä¢ Q1 (25%): {Q1:.2f}")
        st.write(f"‚Ä¢ Q2 (50%): {Q2:.2f}")
        st.write(f"‚Ä¢ Q3 (75%): {Q3:.2f}")
        st.write(f"‚Ä¢ IQR: {IQR:.2f}")
    
    def _create_density_plot(self, df: pd.DataFrame, column: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        st.write(f"**–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column}**")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        data = df[column].dropna()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{data.mean():.2f}")
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{data.median():.2f}")
        with col3:
            st.metric("–ú–æ–¥–∞", f"{data.mode().iloc[0] if not data.mode().empty else 'N/A'}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        st.write("**–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏):**")
        st.bar_chart(data.value_counts().sort_index())
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        skewness = data.skew()
        kurtosis = data.kurtosis()
        
        st.write("**–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:**")
        st.write(f"‚Ä¢ –ê—Å–∏–º–º–µ—Ç—Ä–∏—è (skewness): {skewness:.3f}")
        if abs(skewness) < 0.5:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ")
        elif skewness > 0.5:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –∞—Å–∏–º–º–µ—Ç—Ä–∏–µ–π")
        else:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ª–µ–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –∞—Å–∏–º–º–µ—Ç—Ä–∏–µ–π")
        
        st.write(f"‚Ä¢ –≠–∫—Å—Ü–µ—Å—Å (kurtosis): {kurtosis:.3f}")
        if abs(kurtosis) < 0.5:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É")
        elif kurtosis > 0.5:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –æ—Å—Ç—Ä—ã–º –ø–∏–∫–æ–º")
        else:
            st.write("  ‚Üí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–ª–æ—Å–∫–∏–º –ø–∏–∫–æ–º")
    
    def _create_correlation_matrix(self, df: pd.DataFrame):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
        st.write("**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞**")
        
        numeric_df = df.select_dtypes(include=[np.number])
        corr_matrix = numeric_df.corr()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
        st.dataframe(corr_matrix)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        st.write("**–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:**")
        
        # –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        strong_correlations = []
        moderate_correlations = []
        weak_correlations = []
        
        for i, col1 in enumerate(corr_matrix.columns):
            for j, col2 in enumerate(corr_matrix.columns):
                if i < j:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                    corr_value = corr_matrix.loc[col1, col2]
                    
                    if abs(corr_value) > 0.7:
                        strong_correlations.append((col1, col2, corr_value))
                    elif abs(corr_value) > 0.3:
                        moderate_correlations.append((col1, col2, corr_value))
                    else:
                        weak_correlations.append((col1, col2, corr_value))
        
        if strong_correlations:
            st.write("**–°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (|r| > 0.7):**")
            for col1, col2, corr in strong_correlations:
                direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
                st.write(f"‚Ä¢ {col1} ‚Üî {col2}: {corr:.3f} ({direction})")
        
        if moderate_correlations:
            st.write("**–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (0.3 < |r| ‚â§ 0.7):**")
            for col1, col2, corr in moderate_correlations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
                st.write(f"‚Ä¢ {col1} ‚Üî {col2}: {corr:.3f} ({direction})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
        if strong_correlations:
            st.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
        else:
            st.success("‚úÖ –°–∏–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    
    def _create_trend_analysis(self, df: pd.DataFrame, numeric_columns: List[str]):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
        st.write("**–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤**")
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
        trend_column = st.selectbox("–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞", numeric_columns)
        
        if trend_column:
            data = df[trend_column].dropna()
            
            if len(data) > 1:
                # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
                x = np.arange(len(data))
                y = data.values
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                time_correlation = np.corrcoef(x, y)[0, 1]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º", f"{time_correlation:.3f}")
                
                with col2:
                    if time_correlation > 0.3:
                        st.success("üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
                    elif time_correlation < -0.3:
                        st.error("üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
                    else:
                        st.info("‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
                
                with col3:
                    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    first_value = data.iloc[0]
                    last_value = data.iloc[-1]
                    change = ((last_value - first_value) / first_value) * 100
                    st.metric("–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", f"{change:.1f}%")
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
                st.write("**–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞:**")
                chart_data = pd.DataFrame({
                    '–í—Ä–µ–º—è': range(len(data)),
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': data.values
                })
                st.line_chart(chart_data.set_index('–í—Ä–µ–º—è'))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞:**")
                st.write(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_value:.2f}")
                st.write(f"‚Ä¢ –ö–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {last_value:.2f}")
                st.write(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data.min():.2f}")
                st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data.max():.2f}")
                st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data.mean():.2f}")
                
                # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility = data.std() / data.mean() * 100
                st.write(f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.1f}%")
                
                if volatility > 20:
                    st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                elif volatility > 10:
                    st.info("‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                else:
                    st.success("‚úÖ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞")
