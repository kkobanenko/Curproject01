"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import streamlit as st
import requests
from typing import Dict, Any, Optional
import json
from datetime import datetime


class UserSettings:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
        self.settings_categories = {
            'profile': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
            'preferences': '‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
            'security': 'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'notifications': 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'interface': 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            'data': 'üìä –î–∞–Ω–Ω—ã–µ',
            'integrations': 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'advanced': 'üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ',
            'backup': 'üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'
        }
    
    def render(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_info —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(st.session_state, 'user_info') or not st.session_state.user_info:
            st.error("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        selected_category = self._render_category_navigation()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if selected_category == 'profile':
            self._render_profile_settings()
        elif selected_category == 'preferences':
            self._render_preferences_settings()
        elif selected_category == 'security':
            self._render_security_settings()
        elif selected_category == 'notifications':
            self._render_notifications_settings()
        elif selected_category == 'interface':
            self._render_interface_settings()
        elif selected_category == 'data':
            self._render_data_settings()
        elif selected_category == 'integrations':
            self._render_integrations_settings()
        elif selected_category == 'advanced':
            self._render_advanced_settings()
        elif selected_category == 'backup':
            self._render_backup_settings()
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        self._render_common_actions()
    
    def _render_category_navigation(self) -> str:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.subheader("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cols = st.columns(len(self.settings_categories))
        selected_category = None
        
        for i, (key, name) in enumerate(self.settings_categories.items()):
            with cols[i]:
                if st.button(name, key=f"category_{key}", use_container_width=True):
                    selected_category = key
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not selected_category:
            selected_category = 'profile'
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {self.settings_categories[selected_category]}")
        
        return selected_category
    
    def _render_profile_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        st.subheader("üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        
        user_info = st.session_state.user_info
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                first_name = st.text_input(
                    "–ò–º—è",
                    value=user_info.get('first_name', ''),
                    key="profile_first_name"
                )
                
                last_name = st.text_input(
                    "–§–∞–º–∏–ª–∏—è",
                    value=user_info.get('last_name', ''),
                    key="profile_last_name"
                )
                
                email = st.text_input(
                    "Email",
                    value=user_info.get('email', ''),
                    key="profile_email",
                    disabled=True  # Email –æ–±—ã—á–Ω–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
                )
            
            with col2:
                username = st.text_input(
                    "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    value=user_info.get('username', ''),
                    key="profile_username",
                    disabled=True  # Username –æ–±—ã—á–Ω–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
                )
                
                phone = st.text_input(
                    "–¢–µ–ª–µ—Ñ–æ–Ω",
                    value=user_info.get('phone', ''),
                    key="profile_phone"
                )
                
                position = st.text_input(
                    "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                    value=user_info.get('position', ''),
                    key="profile_position"
                )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                department = st.text_input(
                    "–û—Ç–¥–µ–ª",
                    value=user_info.get('department', ''),
                    key="profile_department"
                )
                
                company = st.text_input(
                    "–ö–æ–º–ø–∞–Ω–∏—è",
                    value=user_info.get('company', ''),
                    key="profile_company"
                )
                
                location = st.text_input(
                    "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                    value=user_info.get('location', ''),
                    key="profile_location"
                )
            
            with col2:
                bio = st.text_area(
                    "–û —Å–µ–±–µ",
                    value=user_info.get('bio', ''),
                    height=100,
                    key="profile_bio"
                )
                
                website = st.text_input(
                    "–í–µ–±-—Å–∞–π—Ç",
                    value=user_info.get('website', ''),
                    key="profile_website"
                )
        
        # –ê–≤–∞—Ç–∞—Ä
        with st.expander("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä", expanded=False):
            col1, col2 = st.columns([1, 2])
            
            with col1:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞
                st.info("–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                
                if user_info.get('avatar_url'):
                    st.image(user_info['avatar_url'], width=100, caption="–¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä")
                else:
                    st.info("–ê–≤–∞—Ç–∞—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            with col2:
                st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:**")
                st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–∞–≤–∏—Ç–∞—Ä", value=True, disabled=True)
                st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", value=False, disabled=True)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="save_profile", use_container_width=True):
                self._save_profile_settings()
        
        with col2:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key="reset_profile", use_container_width=True):
                st.rerun()
        
        with col3:
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è", key="export_profile", use_container_width=True):
                self._export_profile()
    
    def _render_preferences_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        st.subheader("‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
        
        # –Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω
        with st.expander("üåç –Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                language = st.selectbox(
                    "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    ["–†—É—Å—Å–∫–∏–π", "English", "Deutsch", "Fran√ßais", "Espa√±ol"],
                    index=0,
                    key="pref_language"
                )
                
                timezone = st.selectbox(
                    "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                    ["UTC+3 (–ú–æ—Å–∫–≤–∞)", "UTC+0 (–õ–æ–Ω–¥–æ–Ω)", "UTC-5 (–ù—å—é-–ô–æ—Ä–∫)", "UTC+9 (–¢–æ–∫–∏–æ)"],
                    index=0,
                    key="pref_timezone"
                )
            
            with col2:
                date_format = st.selectbox(
                    "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
                    ["DD.MM.YYYY", "MM/DD/YYYY", "YYYY-MM-DD"],
                    index=0,
                    key="pref_date_format"
                )
                
                time_format = st.selectbox(
                    "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏",
                    ["24-—á–∞—Å–æ–≤–æ–π", "12-—á–∞—Å–æ–≤–æ–π"],
                    index=0,
                    key="pref_time_format"
                )
        
        # RAG –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RAG", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                default_top_k = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    min_value=1,
                    max_value=50,
                    value=10,
                    key="pref_top_k"
                )
                
                include_citations = st.checkbox(
                    "–í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã",
                    value=True,
                    key="pref_citations"
                )
                
                auto_expand_results = st.checkbox(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    value=False,
                    key="pref_auto_expand"
                )
            
            with col2:
                preferred_models = st.multiselect(
                    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏",
                    ["llama3:8b", "llama3.1:8b", "bge-m3", "gpt-3.5-turbo"],
                    default=["llama3:8b"],
                    key="pref_models"
                )
                
                chunk_size = st.selectbox(
                    "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤",
                    ["–ú–∞–ª–µ–Ω—å–∫–∏–π (256)", "–°—Ä–µ–¥–Ω–∏–π (512)", "–ë–æ–ª—å—à–æ–π (1024)"],
                    index=1,
                    key="pref_chunk_size"
                )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        with st.expander("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                search_history = st.checkbox(
                    "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞",
                    value=True,
                    key="pref_search_history"
                )
                
                search_suggestions = st.checkbox(
                    "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∏—Å–∫–∞",
                    value=True,
                    key="pref_search_suggestions"
                )
                
                auto_complete = st.checkbox(
                    "–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
                    value=True,
                    key="pref_auto_complete"
                )
            
            with col2:
                default_search_filters = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    ["–î–æ–∫—É–º–µ–Ω—Ç—ã", "–¢–∞–±–ª–∏—Ü—ã", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "PDF", "DOCX", "XLSX"],
                    default=["–î–æ–∫—É–º–µ–Ω—Ç—ã"],
                    key="pref_search_filters"
                )
                
                search_timeout = st.slider(
                    "–¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)",
                    min_value=5,
                    max_value=60,
                    value=30,
                    key="pref_search_timeout"
                )
    
    def _render_security_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        st.subheader("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        with st.expander("üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                current_password = st.text_input(
                    "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å",
                    type="password",
                    key="security_current_password"
                )
                
                new_password = st.text_input(
                    "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
                    type="password",
                    key="security_new_password"
                )
            
            with col2:
                confirm_password = st.text_input(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
                    type="password",
                    key="security_confirm_password"
                )
                
                st.write("**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:**")
                st.write("‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
                st.write("‚Ä¢ –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
                st.write("‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
            if st.button("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", key="change_password"):
                self._change_password(current_password, new_password, confirm_password)
        
        # –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        with st.expander("üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                two_factor_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å 2FA",
                    value=False,
                    key="security_2fa"
                )
                
                if two_factor_enabled:
                    st.info("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                    st.button("üì± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA", disabled=True)
            
            with col2:
                backup_codes = st.checkbox(
                    "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã",
                    value=False,
                    key="security_backup_codes"
                )
                
                if backup_codes:
                    st.button("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã", disabled=True)
        
        # –°–µ—Å—Å–∏–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        with st.expander("üíª –°–µ—Å—Å–∏–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", expanded=False):
            st.write("**–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:**")
            st.info("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.checkbox("–ó–∞–ø–æ–º–Ω–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", value=True, disabled=True)
                st.checkbox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–∞—Ö", value=True, disabled=True)
            
            with col2:
                st.button("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏", disabled=True)
                st.button("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏", disabled=True)
    
    def _render_notifications_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        st.subheader("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        with st.expander("üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                email_notifications = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    value=True,
                    key="notif_email_enabled"
                )
                
                if email_notifications:
                    st.checkbox("–ù–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", value=True, key="notif_new_docs")
                    st.checkbox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", value=False, key="notif_search_results")
                    st.checkbox("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True, key="notif_system")
            
            with col2:
                if email_notifications:
                    st.checkbox("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", value=False, key="notif_weekly_report")
                    st.checkbox("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", value=False, key="notif_analytics")
                    st.checkbox("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", value=True, key="notif_security")
        
        # Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        with st.expander("üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                push_notifications = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    value=False,
                    key="notif_push_enabled"
                )
                
                if push_notifications:
                    st.checkbox("–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", value=True, key="notif_push_messages")
                    st.checkbox("–í–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", value=True, key="notif_push_updates")
            
            with col2:
                if push_notifications:
                    st.checkbox("–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True, key="notif_push_sound")
                    st.checkbox("–í–∏–±—Ä–∞—Ü–∏—è", value=False, key="notif_push_vibration")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        with st.expander("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                quiet_hours = st.checkbox(
                    "–¢–∏—Ö–∏–µ —á–∞—Å—ã",
                    value=False,
                    key="notif_quiet_hours"
                )
                
                if quiet_hours:
                    start_time = st.time_input("–ù–∞—á–∞–ª–æ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤", value=datetime.strptime("22:00", "%H:%M").time())
                    end_time = st.time_input("–ö–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤", value=datetime.strptime("08:00", "%H:%M").time())
            
            with col2:
                timezone_notifications = st.selectbox(
                    "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    ["–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", "UTC", "–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞"],
                    index=0,
                    key="notif_timezone"
                )
    
    def _render_interface_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
        # –¢–µ–º–∞ –∏ —Ü–≤–µ—Ç–∞
        with st.expander("üé® –¢–µ–º–∞ –∏ —Ü–≤–µ—Ç–∞", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                theme = st.selectbox(
                    "–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    ["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"],
                    index=0,
                    key="ui_theme"
                )
                
                primary_color = st.color_picker(
                    "–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç",
                    value="#FF6B6B",
                    key="ui_primary_color"
                )
                
                accent_color = st.color_picker(
                    "–ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç",
                    value="#4ECDC4",
                    key="ui_accent_color"
                )
            
            with col2:
                font_size = st.selectbox(
                    "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
                    ["–ú–∞–ª–µ–Ω—å–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ë–æ–ª—å—à–æ–π"],
                    index=1,
                    key="ui_font_size"
                )
                
                font_family = st.selectbox(
                    "–°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤",
                    ["–°–∏—Å—Ç–µ–º–Ω—ã–π", "Arial", "Times New Roman", "Roboto"],
                    index=0,
                    key="ui_font_family"
                )
        
        # –ú–∞–∫–µ—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        with st.expander("üìê –ú–∞–∫–µ—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                sidebar_position = st.selectbox(
                    "–ü–æ–∑–∏—Ü–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏",
                    ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞"],
                    index=0,
                    key="ui_sidebar_position"
                )
                
                sidebar_auto_hide = st.checkbox(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å",
                    value=False,
                    key="ui_sidebar_auto_hide"
                )
                
                compact_mode = st.checkbox(
                    "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º",
                    value=False,
                    key="ui_compact_mode"
                )
            
            with col2:
                show_breadcrumbs = st.checkbox(
                    "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏",
                    value=True,
                    key="ui_breadcrumbs"
                )
                
                show_progress_bars = st.checkbox(
                    "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                    value=True,
                    key="ui_progress_bars"
                )
                
                animations = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏",
                    value=True,
                    key="ui_animations"
                )
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        with st.expander("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                custom_dashboard = st.checkbox(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å",
                    value=False,
                    key="ui_custom_dashboard"
                )
                
                if custom_dashboard:
                    st.button("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–Ω–µ–ª—å", disabled=True)
                
                favorite_actions = st.checkbox(
                    "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                    value=True,
                    key="ui_favorite_actions"
                )
            
            with col2:
                recent_items_count = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    min_value=5,
                    max_value=20,
                    value=10,
                    key="ui_recent_items"
                )
                
                auto_refresh = st.checkbox(
                    "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    value=False,
                    key="ui_auto_refresh"
                )
    
    def _render_data_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        st.subheader("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        with st.expander("üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                auto_save = st.checkbox(
                    "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                    value=True,
                    key="data_auto_save"
                )
                
                if auto_save:
                    save_interval = st.selectbox(
                        "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                        ["30 —Å–µ–∫—É–Ω–¥", "1 –º–∏–Ω—É—Ç–∞", "5 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç"],
                        index=1,
                        key="data_save_interval"
                    )
                
                cloud_sync = st.checkbox(
                    "–û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
                    value=False,
                    key="data_cloud_sync"
                )
            
            with col2:
                data_retention = st.selectbox(
                    "–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    ["30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "1 –≥–æ–¥", "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"],
                    index=1,
                    key="data_retention"
                )
                
                backup_frequency = st.selectbox(
                    "–ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                    ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"],
                    index=1,
                    key="data_backup_freq"
                )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç
        with st.expander("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                default_export_format = st.selectbox(
                    "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    ["CSV", "Excel", "JSON", "PDF"],
                    index=0,
                    key="data_default_export"
                )
                
                include_metadata = st.checkbox(
                    "–í–∫–ª—é—á–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ",
                    value=True,
                    key="data_export_metadata"
                )
            
            with col2:
                auto_export = st.checkbox(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç",
                    value=False,
                    key="data_auto_export"
                )
                
                if auto_export:
                    st.selectbox(
                        "–ß–∞—Å—Ç–æ—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                        ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"],
                        index=1,
                        key="data_export_freq"
                    )
        
        # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
        with st.expander("üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                data_analytics = st.checkbox(
                    "–†–∞–∑—Ä–µ—à–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    value=True,
                    key="data_analytics"
                )
                
                data_sharing = st.checkbox(
                    "–†–∞–∑—Ä–µ—à–∏—Ç—å –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏",
                    value=False,
                    key="data_sharing"
                )
            
            with col2:
                data_encryption = st.checkbox(
                    "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    value=True,
                    key="data_encryption",
                    disabled=True
                )
                
                st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", key="data_delete_all")
    
    def _render_integrations_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        st.subheader("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        
        # API –∫–ª—é—á–∏
        with st.expander("üîë API –∫–ª—é—á–∏", expanded=True):
            st.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
            
            col1, col2 = st.columns(2)
            
            with col1:
                api_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å API –¥–æ—Å—Ç—É–ø",
                    value=False,
                    key="integrations_api_enabled"
                )
                
                if api_enabled:
                    st.text_input("API –∫–ª—é—á", type="password", key="integrations_api_key")
                    st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", disabled=True)
            
            with col2:
                webhook_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å webhooks",
                    value=False,
                    key="integrations_webhook_enabled"
                )
                
                if webhook_enabled:
                    st.text_input("Webhook URL", key="integrations_webhook_url")
                    st.button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å webhook", disabled=True)
        
        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        with st.expander("üåê –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã", expanded=False):
            st.write("**–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.checkbox("Google Drive", value=False, disabled=True)
                st.checkbox("Dropbox", value=False, disabled=True)
                st.checkbox("OneDrive", value=False, disabled=True)
            
            with col2:
                st.checkbox("Slack", value=False, disabled=True)
                st.checkbox("Microsoft Teams", value=False, disabled=True)
                st.checkbox("Discord", value=False, disabled=True)
            
            st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å", disabled=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        with st.expander("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                zapier_enabled = st.checkbox(
                    "Zapier –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                    value=False,
                    key="integrations_zapier"
                )
                
                if zapier_enabled:
                    st.text_input("Zapier Webhook", key="integrations_zapier_webhook")
            
            with col2:
                ifttt_enabled = st.checkbox(
                    "IFTTT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                    value=False,
                    key="integrations_ifttt"
                )
                
                if ifttt_enabled:
                    st.text_input("IFTTT Webhook", key="integrations_ifttt_webhook")
    
    def _render_common_actions(self):
        """–û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        st.divider()
        st.subheader("üîß –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", key="save_all_settings", use_container_width=True):
                self._save_all_settings()
        
        with col2:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", key="reset_all_settings", use_container_width=True):
                self._reset_all_settings()
        
        with col3:
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", key="export_settings", use_container_width=True):
                self._export_settings()
        
        with col4:
            if st.button("üì§ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", key="import_settings", use_container_width=True):
                self._import_settings()
    
    def _save_profile_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            profile_data = {
                'first_name': st.session_state.get('profile_first_name', ''),
                'last_name': st.session_state.get('profile_last_name', ''),
                'phone': st.session_state.get('profile_phone', ''),
                'position': st.session_state.get('profile_position', ''),
                'department': st.session_state.get('profile_department', ''),
                'company': st.session_state.get('profile_company', ''),
                'location': st.session_state.get('profile_location', ''),
                'bio': st.session_state.get('profile_bio', ''),
                'website': st.session_state.get('profile_website', '')
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.put(
                f"{self.api_base_url}/api/v1/auth/profile",
                json=profile_data,
                headers=headers
            )
            
            if response.status_code == 200:
                st.success("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                updated_profile = response.json()
                st.session_state.user_info.update(updated_profile)
                
            else:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _change_password(self, current_password: str, new_password: str, confirm_password: str):
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
        if not current_password or not new_password or not confirm_password:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        if new_password != confirm_password:
            st.error("‚ùå –ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        if len(new_password) < 8:
            st.error("‚ùå –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.put(
                f"{self.api_base_url}/api/v1/auth/password",
                json={
                    'current_password': current_password,
                    'new_password': new_password
                },
                headers=headers
            )
            
            if response.status_code == 200:
                st.success("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                st.session_state['security_current_password'] = ''
                st.session_state['security_new_password'] = ''
                st.session_state['security_confirm_password'] = ''
                
            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {response.status_code}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _export_profile(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            profile_data = {
                'export_time': datetime.now().isoformat(),
                'profile': st.session_state.user_info,
                'settings': self._collect_current_settings()
            }
            
            json_str = json.dumps(profile_data, indent=2, ensure_ascii=False)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                data=json_str,
                file_name=f"profile_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    def _collect_current_settings(self) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = {}
        
        # –ü—Ä–æ—Ñ–∏–ª—å
        settings['profile'] = {
            'first_name': st.session_state.get('profile_first_name', ''),
            'last_name': st.session_state.get('profile_last_name', ''),
            'phone': st.session_state.get('profile_phone', ''),
            'position': st.session_state.get('profile_position', ''),
            'department': st.session_state.get('profile_department', ''),
            'company': st.session_state.get('profile_company', ''),
            'location': st.session_state.get('profile_location', ''),
            'bio': st.session_state.get('profile_bio', ''),
            'website': st.session_state.get('profile_website', '')
        }
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        settings['preferences'] = {
            'language': st.session_state.get('pref_language', '–†—É—Å—Å–∫–∏–π'),
            'timezone': st.session_state.get('pref_timezone', 'UTC+3 (–ú–æ—Å–∫–≤–∞)'),
            'default_top_k': st.session_state.get('pref_top_k', 10),
            'include_citations': st.session_state.get('pref_citations', True)
        }
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        settings['interface'] = {
            'theme': st.session_state.get('ui_theme', '–°–≤–µ—Ç–ª–∞—è'),
            'font_size': st.session_state.get('ui_font_size', '–°—Ä–µ–¥–Ω–∏–π'),
            'compact_mode': st.session_state.get('ui_compact_mode', False)
        }
        
        return settings
    
    def _save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_data = self._collect_current_settings()
            
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.put(
                f"{self.api_base_url}/api/v1/auth/settings",
                json=settings_data,
                headers=headers
            )
            
            if response.status_code == 200:
                st.success("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response.status_code}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _reset_all_settings(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if st.button("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", key="confirm_reset_all"):
            try:
                headers = {}
                if self.access_token:
                    headers["Authorization"] = f"Bearer {self.access_token}"
                
                response = requests.post(
                    f"{self.api_base_url}/api/v1/auth/settings/reset",
                    headers=headers
                )
                
                if response.status_code == 200:
                    st.success("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response.status_code}")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_data = {
                'export_time': datetime.now().isoformat(),
                'settings': self._collect_current_settings()
            }
            
            json_str = json.dumps(settings_data, indent=2, ensure_ascii=False)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                data=json_str,
                file_name=f"settings_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    def _import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.info("üì§ –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ (.json)",
            type=['json'],
            key="import_settings_file"
        )
        
        if uploaded_file is not None:
            try:
                settings_data = json.load(uploaded_file)
                st.success("‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω")
                st.json(settings_data)
                
                if st.button("üì• –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", disabled=True):
                    st.info("–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
    
    def _render_advanced_settings(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        st.subheader("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        with st.expander("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                cache_size = st.slider(
                    "–†–∞–∑–º–µ—Ä –∫—ç—à–∞ (MB)",
                    min_value=10,
                    max_value=1000,
                    value=100,
                    key="advanced_cache_size"
                )
                
                max_concurrent_requests = st.slider(
                    "–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                    min_value=1,
                    max_value=20,
                    value=5,
                    key="advanced_max_requests"
                )
                
                request_timeout = st.slider(
                    "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)",
                    min_value=5,
                    max_value=120,
                    value=30,
                    key="advanced_timeout"
                )
            
            with col2:
                enable_compression = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    value=True,
                    key="advanced_compression"
                )
                
                enable_caching = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    value=True,
                    key="advanced_caching"
                )
                
                debug_mode = st.checkbox(
                    "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
                    value=False,
                    key="advanced_debug"
                )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        with st.expander("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                log_level = st.selectbox(
                    "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                    ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                    index=1,
                    key="advanced_log_level"
                )
                
                log_requests = st.checkbox(
                    "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã",
                    value=True,
                    key="advanced_log_requests"
                )
            
            with col2:
                log_retention = st.selectbox(
                    "–•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤",
                    ["1 –¥–µ–Ω—å", "7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π"],
                    index=2,
                    key="advanced_log_retention"
                )
                
                log_analytics = st.checkbox(
                    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    value=True,
                    key="advanced_log_analytics"
                )
        
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        with st.expander("üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                beta_features = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –±–µ—Ç–∞-—Ñ—É–Ω–∫—Ü–∏–∏",
                    value=False,
                    key="advanced_beta_features"
                )
                
                ai_suggestions = st.checkbox(
                    "AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                    value=True,
                    key="advanced_ai_suggestions"
                )
            
            with col2:
                auto_updates = st.checkbox(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                    value=True,
                    key="advanced_auto_updates"
                )
                
                telemetry = st.checkbox(
                    "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏",
                    value=False,
                    key="advanced_telemetry"
                )
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
            import platform
            import sys
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:**")
                st.write(f"‚Ä¢ {platform.system()} {platform.release()}")
                st.write(f"‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
                st.write(f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
            
            with col2:
                st.write("**Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:**")
                st.write(f"‚Ä¢ Python: {sys.version.split()[0]}")
                st.write(f"‚Ä¢ Streamlit: {st.__version__}")
                st.write(f"‚Ä¢ Pandas: {pd.__version__}")
    
    def _render_backup_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        st.subheader("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        with st.expander("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                auto_backup = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    value=True,
                    key="backup_auto_enabled"
                )
                
                if auto_backup:
                    backup_frequency = st.selectbox(
                        "–ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                        ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"],
                        index=1,
                        key="backup_frequency"
                    )
                    
                    backup_time = st.time_input(
                        "–í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                        value=datetime.strptime("02:00", "%H:%M").time(),
                        key="backup_time"
                    )
            
            with col2:
                if auto_backup:
                    backup_retention = st.selectbox(
                        "–•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                        ["7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "1 –≥–æ–¥", "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"],
                        index=2,
                        key="backup_retention"
                    )
                    
                    backup_compression = st.checkbox(
                        "–°–∂–∞—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                        value=True,
                        key="backup_compression"
                    )
        
        # –†—É—á–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        with st.expander("üì§ –†—É—á–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", expanded=True):
            st.write("**–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:**")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üíæ –ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è", key="backup_full", use_container_width=True):
                    self._create_full_backup()
            
            with col2:
                if st.button("üìä –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ", key="backup_data", use_container_width=True):
                    self._create_data_backup()
            
            with col3:
                if st.button("‚öôÔ∏è –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", key="backup_settings", use_container_width=True):
                    self._create_settings_backup()
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        with st.expander("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", expanded=False):
            st.write("**–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:**")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            uploaded_backup = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                type=['zip', 'json', 'tar'],
                key="backup_upload"
            )
            
            if uploaded_backup is not None:
                st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_backup.name}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key="restore_backup"):
                        self._restore_backup(uploaded_backup)
                
                with col2:
                    if st.button("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", key="preview_backup"):
                        self._preview_backup(uploaded_backup)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
        with st.expander("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏", expanded=False):
            st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:**")
            
            # –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–¥–µ–º–æ)
            backup_list = [
                {"name": "backup_2024_01_15_02_00.zip", "date": "2024-01-15 02:00", "size": "15.2 MB", "type": "–ü–æ–ª–Ω–∞—è"},
                {"name": "backup_2024_01_14_02_00.zip", "date": "2024-01-14 02:00", "size": "14.8 MB", "type": "–ü–æ–ª–Ω–∞—è"},
                {"name": "backup_2024_01_13_02_00.zip", "date": "2024-01-13 02:00", "size": "15.1 MB", "type": "–ü–æ–ª–Ω–∞—è"},
            ]
            
            for backup in backup_list:
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                
                with col1:
                    st.write(f"üìÅ {backup['name']}")
                
                with col2:
                    st.write(f"üìÖ {backup['date']} ({backup['size']})")
                
                with col3:
                    if st.button("üì•", key=f"download_{backup['name']}", help="–°–∫–∞—á–∞—Ç—å"):
                        st.info("–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
                
                with col4:
                    if st.button("üóëÔ∏è", key=f"delete_{backup['name']}", help="–£–¥–∞–ª–∏—Ç—å"):
                        st.info("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def _create_full_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            backup_data = {
                'backup_type': 'full',
                'backup_time': datetime.now().isoformat(),
                'user_info': st.session_state.get('user_info', {}),
                'settings': self._collect_current_settings(),
                'metadata': {
                    'version': '1.0',
                    'created_by': st.session_state.get('user_info', {}).get('username', 'unknown')
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
            json_str = json.dumps(backup_data, indent=2, ensure_ascii=False)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"backup_full_{timestamp}.json"
            
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                data=json_str,
                file_name=filename,
                mime="application/json"
            )
            
            st.success("‚úÖ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    
    def _create_data_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        st.info("üìä –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def _create_settings_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_data = {
                'backup_type': 'settings',
                'backup_time': datetime.now().isoformat(),
                'settings': self._collect_current_settings(),
                'metadata': {
                    'version': '1.0',
                    'created_by': st.session_state.get('user_info', {}).get('username', 'unknown')
                }
            }
            
            json_str = json.dumps(settings_data, indent=2, ensure_ascii=False)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"backup_settings_{timestamp}.json"
            
            st.download_button(
                label="‚öôÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                data=json_str,
                file_name=filename,
                mime="application/json"
            )
            
            st.success("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    def _restore_backup(self, uploaded_file):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            backup_data = json.load(uploaded_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_type = backup_data.get('backup_type', 'unknown')
            
            if backup_type == 'settings':
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = backup_data.get('settings', {})
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–µ–º–æ)
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                st.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                
            elif backup_type == 'full':
                st.success("‚úÖ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                st.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
            else:
                st.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
    
    def _preview_backup(self, uploaded_file):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            backup_data = json.load(uploaded_file)
            
            st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"‚Ä¢ **–¢–∏–ø:** {backup_data.get('backup_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {backup_data.get('backup_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {len(uploaded_file.getvalue())} –±–∞–π—Ç")
            
            with col2:
                metadata = backup_data.get('metadata', {})
                st.write(f"‚Ä¢ **–í–µ—Ä—Å–∏—è:** {metadata.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"‚Ä¢ **–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:** {metadata.get('created_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with st.expander("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", expanded=False):
                st.json(backup_data)
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")
