"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
"""
import streamlit as st
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
import json


class ChatInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
    
    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        st.header("üí¨ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            user_message = st.text_input(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...",
                key="user_input",
                help="–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"
            )
        
        with col2:
            top_k = st.number_input(
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç", 
                min_value=1, 
                max_value=20, 
                value=5,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
            )
        
        with col3:
            temperature = st.slider(
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1,
                help="–í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                max_length = st.number_input(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞",
                    min_value=100,
                    max_value=2000,
                    value=500,
                    step=100
                )
            
            with col2:
                include_citations = st.checkbox("–í–∫–ª—é—á–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã", value=True)
                include_sources = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", value=True)
            
            with col3:
                conversation_mode = st.selectbox(
                    "–†–µ–∂–∏–º –±–µ—Å–µ–¥—ã",
                    ["single", "conversation"],
                    format_func=lambda x: {
                        "single": "–û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                        "conversation": "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã"
                    }[x]
                )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.button("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True) and user_message:
            self._send_message(
                message=user_message,
                top_k=top_k,
                temperature=temperature,
                max_length=max_length,
                include_citations=include_citations,
                include_sources=include_sources,
                conversation_mode=conversation_mode
            )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        self._render_chat_history()
    
    def _send_message(self, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.chat_history.append({
            "role": "user",
            "content": kwargs["message"],
            "timestamp": datetime.now(),
            "parameters": {
                "top_k": kwargs["top_k"],
                "temperature": kwargs["temperature"],
                "max_length": kwargs["max_length"]
            }
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç..."):
            response = self._get_rag_response(
                question=kwargs["message"],
                top_k=kwargs["top_k"],
                temperature=kwargs["temperature"],
                max_length=kwargs["max_length"],
                include_citations=kwargs["include_citations"],
                conversation_mode=kwargs["conversation_mode"]
            )
            
            if "error" in response:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response['error']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "role": "error",
                    "content": f"–û—à–∏–±–∫–∞: {response['error']}",
                    "timestamp": datetime.now()
                })
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "role": "assistant",
                    "content": response.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω'),
                    "timestamp": datetime.now(),
                    "citations": response.get('citations', []),
                    "sources": response.get('sources', []),
                    "confidence": response.get('confidence', 0.0),
                    "processing_time": response.get('processing_time', 0.0)
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –±–µ—Å–µ–¥—ã
                if 'conversation_id' in response:
                    st.session_state.current_conversation = response['conversation_id']
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        st.rerun()
    
    def _get_rag_response(self, **kwargs) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            request_data = {
                "question": kwargs["question"],
                "top_k": kwargs["top_k"],
                "temperature": kwargs["temperature"],
                "max_length": kwargs["max_length"],
                "include_citations": kwargs["include_citations"]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –±–µ—Å–µ–¥—ã –µ—Å–ª–∏ —Ä–µ–∂–∏–º conversation
            if kwargs["conversation_mode"] == "conversation" and st.session_state.current_conversation:
                request_data["conversation_id"] = st.session_state.current_conversation
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.post(
                f"{self.api_base_url}/api/v1/answers/generate",
                json=request_data,
                headers=headers,
                timeout=60
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                return {"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {error_msg}"}
                
        except requests.exceptions.Timeout:
            return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"}
        except requests.exceptions.ConnectionError:
            return {"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"}
        except Exception as e:
            return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    def _render_chat_history(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã")
        
        if not st.session_state.chat_history:
            st.info("üí° –ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏
        with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                show_errors = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏", value=False)
            
            with col2:
                min_confidence = st.slider(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.0,
                    step=0.1
                )
            
            with col3:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
                    st.session_state.chat_history = []
                    st.session_state.current_conversation = None
                    st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i, message in enumerate(st.session_state.chat_history):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑
            if message["role"] == "error" and not show_errors:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if message.get("confidence", 1.0) < min_confidence:
                continue
            
            self._render_message(message, i)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Å–µ–¥–µ
        if st.session_state.current_conversation:
            st.info(f"üÜî ID –±–µ—Å–µ–¥—ã: {st.session_state.current_conversation}")
    
    def _render_message(self, message: Dict[str, Any], index: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        role = message["role"]
        content = message["content"]
        timestamp = message.get("timestamp", datetime.now())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if role == "user":
            st.chat_message("user").write(content)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if message.get("parameters"):
                params = message["parameters"]
                st.caption(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: k={params['top_k']}, t={params['temperature']}, len={params['max_length']}")
        
        elif role == "assistant":
            with st.chat_message("assistant"):
                st.write(content)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                confidence = message.get("confidence", 0.0)
                if confidence > 0:
                    st.progress(confidence)
                    st.caption(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_time = message.get("processing_time", 0.0)
                if processing_time > 0:
                    st.caption(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
                citations = message.get("citations", [])
                if citations:
                    with st.expander("üìñ –¶–∏—Ç–∞—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"):
                        for citation in citations:
                            st.write(f"**{citation.get('source', 'N/A')}** (—Å—Ç—Ä. {citation.get('page', 'N/A')})")
                            st.write(f"*{citation.get('text', '')}*")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources = message.get("sources", [])
                if sources:
                    with st.expander("üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
                        for source in sources:
                            st.write(f"- **{source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**")
                            st.write(f"  –¢–∏–ø: {source.get('type', 'N/A')}")
                            st.write(f"  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.get('relevance', 0):.3f}")
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button(f"üëç –ü–æ–ª–µ–∑–Ω–æ", key=f"like_{index}"):
                        st.success("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                
                with col2:
                    if st.button(f"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ", key=f"dislike_{index}"):
                        st.error("‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                
                with col3:
                    if st.button(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy_{index}"):
                        st.success("‚úÖ –û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                        st.session_state.copied_content = content
        
        elif role == "error":
            st.error(f"‚ùå {content}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        st.caption(f"üïê {timestamp.strftime('%H:%M:%S')}")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if index < len(st.session_state.chat_history) - 1:
            st.divider()


class ChatHistory:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞"""
    
    def __init__(self):
        self.history = []
    
    def add_message(self, role: str, content: str, **kwargs):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now(),
            **kwargs
        }
        self.history.append(message)
    
    def get_conversation_context(self, conversation_id: str = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã –¥–ª—è RAG"""
        if not conversation_id:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return self.history[-limit:] if self.history else []
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ID –±–µ—Å–µ–¥—ã
        return self.history[-limit:] if self.history else []
    
    def export_history(self, format: str = "json") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        if format == "json":
            return json.dumps(self.history, default=str, ensure_ascii=False, indent=2)
        elif format == "txt":
            lines = []
            for msg in self.history:
                timestamp = msg["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
                role = "üë§" if msg["role"] == "user" else "ü§ñ"
                lines.append(f"[{timestamp}] {role}: {msg['content']}")
            return "\n".join(lines)
        else:
            return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history.clear()
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        if not self.history:
            return {
                "total_messages": 0,
                "user_messages": 0,
                "assistant_messages": 0,
                "error_messages": 0,
                "total_tokens": 0,
                "avg_response_time": 0.0
            }
        
        user_messages = len([m for m in self.history if m["role"] == "user"])
        assistant_messages = len([m for m in self.history if m["role"] == "assistant"])
        error_messages = len([m for m in self.history if m["role"] == "error"])
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
        total_tokens = sum(len(m["content"].split()) for m in self.history)
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_times = []
        for i, msg in enumerate(self.history):
            if msg["role"] == "assistant" and i > 0:
                prev_msg = self.history[i-1]
                if prev_msg["role"] == "user":
                    time_diff = (msg["timestamp"] - prev_msg["timestamp"]).total_seconds()
                    response_times.append(time_diff)
        
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0.0
        
        return {
            "total_messages": len(self.history),
            "user_messages": user_messages,
            "assistant_messages": assistant_messages,
            "error_messages": error_messages,
            "total_tokens": total_tokens,
            "avg_response_time": avg_response_time
        }
