"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import streamlit as st
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime


class SearchForm:
    """–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
    
    def render(self) -> Optional[Dict[str, Any]]:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞"""
        st.header("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
        with st.form("search_form"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                query = st.text_input(
                    "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
                    help="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ"
                )
            
            with col2:
                top_k = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                    min_value=1, 
                    max_value=100, 
                    value=20
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    search_type = st.selectbox(
                        "–¢–∏–ø –ø–æ–∏—Å–∫–∞",
                        ["semantic", "keyword", "hybrid"],
                        format_func=lambda x: {
                            "semantic": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π",
                            "keyword": "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", 
                            "hybrid": "–ì–∏–±—Ä–∏–¥–Ω—ã–π"
                        }[x]
                    )
                
                with col2:
                    min_score = st.slider(
                        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.3,
                        step=0.1
                    )
                
                with col3:
                    include_tables = st.checkbox("–í–∫–ª—é—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã", value=True)
                    include_images = st.checkbox("–í–∫–ª—é—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=False)
            
            # –§–∏–ª—å—Ç—Ä—ã –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
            with st.expander("üìã –§–∏–ª—å—Ç—Ä—ã"):
                col1, col2 = st.columns(2)
                
                with col1:
                    file_types = st.multiselect(
                        "–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤",
                        ["PDF", "DOCX", "XLSX", "HTML", "TXT"],
                        default=["PDF", "DOCX"]
                    )
                    
                    date_from = st.date_input(
                        "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å",
                        value=None
                    )
                
                with col2:
                    tags = st.multiselect(
                        "–¢–µ–≥–∏",
                        ["–≤–∞–∂–Ω–æ–µ", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–æ—Ç—á–µ—Ç", "–∞–Ω–∞–ª–∏–∑"],
                        default=[]
                    )
                    
                    date_to = st.date_input(
                        "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ",
                        value=None
                    )
            
            submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏", use_container_width=True)
        
        if submitted and query:
            return self._perform_search(
                query=query,
                top_k=top_k,
                search_type=search_type,
                min_score=min_score,
                include_tables=include_tables,
                include_images=include_images,
                file_types=file_types,
                tags=tags,
                date_from=date_from,
                date_to=date_to
            )
        
        return None
    
    def _perform_search(self, **kwargs) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        try:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                search_params = {
                    "query": kwargs["query"],
                    "top_k": kwargs["top_k"],
                    "search_type": kwargs["search_type"],
                    "min_score": kwargs["min_score"],
                    "include_tables": kwargs["include_tables"],
                    "include_images": kwargs["include_images"]
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                filters = {}
                if kwargs["file_types"]:
                    filters["mime_types"] = kwargs["file_types"]
                if kwargs["tags"]:
                    filters["tags"] = kwargs["tags"]
                if kwargs["date_from"]:
                    filters["date_from"] = kwargs["date_from"].isoformat()
                if kwargs["date_to"]:
                    filters["date_to"] = kwargs["date_to"].isoformat()
                
                if filters:
                    search_params["filters"] = filters
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                headers = {}
                if self.access_token:
                    headers["Authorization"] = f"Bearer {self.access_token}"
                
                response = requests.post(
                    f"{self.api_base_url}/api/v1/search",
                    json=search_params,
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {error_msg}")
                    return None
                    
        except requests.exceptions.Timeout:
            st.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.")
            return None
        except requests.exceptions.ConnectionError:
            st.error("üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.")
            return None
        except Exception as e:
            st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return None


class SearchResults:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, results: Dict[str, Any]):
        self.results = results
    
    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not self.results:
            st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        total_results = self.results.get('total_results', len(self.results.get('results', [])))
        search_time = self.results.get('search_time', 0)
        
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f} —Å–µ–∫")
        
        # –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                sort_by = st.selectbox(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                    ["relevance", "date", "size"],
                    format_func=lambda x: {
                        "relevance": "–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏",
                        "date": "–ü–æ –¥–∞—Ç–µ",
                        "size": "–ü–æ —Ä–∞–∑–º–µ—Ä—É"
                    }[x]
                )
            
            with col2:
                min_score_filter = st.slider(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.0,
                    step=0.1
                )
            
            with col3:
                result_types = st.multiselect(
                    "–¢–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                    ["text", "table", "image"],
                    default=["text", "table"]
                )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_list = self.results.get('results', [])
        
        if not results_list:
            st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_results = self._filter_results(results_list, min_score_filter, result_types)
        
        if not filtered_results:
            st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(filtered_results):
            self._render_result(result, i + 1)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(filtered_results) < total_results:
            st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_results)} –∏–∑ {total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                if st.button("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"):
                    st.info("–§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _filter_results(self, results: List[Dict], min_score: float, types: List[str]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filtered = []
        
        for result in results:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            if result.get('score', 0) < min_score:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            result_type = result.get('kind', 'text')
            if types and result_type not in types:
                continue
            
            filtered.append(result)
        
        return filtered
    
    def _render_result(self, result: Dict[str, Any], index: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        score = result.get('score', 0)
        result_type = result.get('kind', 'text')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
        if result_type == 'table':
            icon = "üìä"
            color = "blue"
        elif result_type == 'image':
            icon = "üñºÔ∏è"
            color = "green"
        else:
            icon = "üìÑ"
            color = "gray"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with st.expander(f"{icon} –†–µ–∑—É–ª—å—Ç–∞—Ç {index} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})"):
            col1, col2 = st.columns([1, 3])
            
            with col1:
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                st.write(f"**–¢–∏–ø:** {result_type}")
                st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {result.get('page_no', 'N/A')}")
                st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç:** {result.get('document_title', 'N/A')}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if result.get('chunk_id'):
                    st.write(f"**–ß–∞–Ω–∫ ID:** {result['chunk_id']}")
                
                if result.get('tags'):
                    st.write("**–¢–µ–≥–∏:**")
                    for tag in result['tags']:
                        st.write(f"- {tag}")
            
            with col2:
                # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if result_type == 'table':
                    st.write("**–¢–∞–±–ª–∏—Ü–∞:**")
                    if result.get('table_html'):
                        st.html(result['table_html'])
                    elif result.get('table_data'):
                        st.dataframe(result['table_data'])
                    else:
                        st.write("–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                elif result_type == 'image':
                    st.write("**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**")
                    if result.get('image_url'):
                        st.image(result['image_url'])
                    else:
                        st.write("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.write("**–¢–µ–∫—Å—Ç:**")
                    content = result.get('content', '')
                    
                    if len(content) > 1000:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                        st.write(content[:500] + "...")
                        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"):
                            st.write(content)
                        st.write("..." + content[-500:])
                    else:
                        st.write(content)
                
                # –¶–∏—Ç–∞—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                if result.get('citations'):
                    st.write("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                    for citation in result['citations']:
                        st.write(f"- {citation.get('source', 'N/A')} (—Å—Ç—Ä. {citation.get('page', 'N/A')})")
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                st.divider()
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{index}"):
                        st.info("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
                with col2:
                    if st.button(f"üí¨ –ß–∞—Ç", key=f"chat_{index}"):
                        st.info("–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
                with col3:
                    if st.button(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy_{index}"):
                        st.success("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                        st.session_state.copied_content = content
