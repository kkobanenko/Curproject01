"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import streamlit as st
import pandas as pd
from typing import Dict, Any, List, Optional
import requests
from datetime import datetime, timedelta
import json
from io import BytesIO


class QueryHistory:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
        self.history_types = {
            'search': 'üîç –ü–æ–∏—Å–∫',
            'chat': 'üí¨ –ß–∞—Ç',
            'upload': 'üì§ –ó–∞–≥—Ä—É–∑–∫–∞',
            'download': 'üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ',
            'analysis': 'üìä –ê–Ω–∞–ª–∏–∑',
            'preview': 'üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
            'export': 'üíæ –≠–∫—Å–ø–æ—Ä—Ç',
            'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        }
    
    def render(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        st.header("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        filters = self._render_filters()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history_data = self._get_query_history(filters)
        
        if history_data:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._render_statistics(history_data)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self._render_history_list(history_data, filters)
            
            # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
            self._render_quick_access(history_data)
            
            # –î–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            self._render_history_actions(history_data)
        else:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
    
    def _render_filters(self) -> Dict[str, Any]:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            selected_types = st.multiselect(
                "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞",
                list(self.history_types.values()),
                default=list(self.history_types.values()),
                key="history_type_filter"
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–ª—é—á–∏
            type_keys = [k for k, v in self.history_types.items() if v in selected_types]
        
        with col2:
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            time_range = st.selectbox(
                "–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                [
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å",
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", 
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                    "–í—Å–µ –≤—Ä–µ–º—è",
                    "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π"
                ],
                key="time_range_filter"
            )
            
            if time_range == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                col2_1, col2_2 = st.columns(2)
                with col2_1:
                    start_date = st.date_input("–° –¥–∞—Ç—ã", key="start_date_filter")
                with col2_2:
                    end_date = st.date_input("–ü–æ –¥–∞—Ç—É", key="end_date_filter")
            else:
                start_date = None
                end_date = None
        
        with col3:
            # –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            status_filter = st.multiselect(
                "–°—Ç–∞—Ç—É—Å",
                ["–£—Å–ø–µ—à–Ω–æ", "–û—à–∏–±–∫–∞", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"],
                default=["–£—Å–ø–µ—à–Ω–æ", "–û—à–∏–±–∫–∞", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"],
                key="status_filter"
            )
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sort_by = st.selectbox(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                ["–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)", "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)", "–ü–æ —Ç–∏–ø—É", "–ü–æ —Å—Ç–∞—Ç—É—Å—É"],
                key="sort_filter"
            )
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        search_text = st.text_input(
            "üîç –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö...",
            key="history_search_text"
        )
        
        return {
            'types': type_keys,
            'time_range': time_range,
            'start_date': start_date,
            'end_date': end_date,
            'status': status_filter,
            'sort_by': sort_by,
            'search_text': search_text
        }
    
    def _get_query_history(self, filters: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ API"""
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'types': ','.join(filters['types']),
                'status': ','.join(filters['status']),
                'sort_by': filters['sort_by'],
                'limit': 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            }
            
            if filters['search_text']:
                params['search'] = filters['search_text']
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if filters['time_range'] != "–í—Å–µ –≤—Ä–µ–º—è":
                if filters['time_range'] == "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å":
                    start_time = datetime.now() - timedelta(hours=1)
                elif filters['time_range'] == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞":
                    start_time = datetime.now() - timedelta(days=1)
                elif filters['time_range'] == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
                    start_time = datetime.now() - timedelta(days=7)
                elif filters['time_range'] == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                    start_time = datetime.now() - timedelta(days=30)
                elif filters['time_range'] == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π" and filters['start_date']:
                    start_time = datetime.combine(filters['start_date'], datetime.min.time())
                else:
                    start_time = None
                
                if start_time:
                    params['start_time'] = start_time.isoformat()
                
                if filters['end_date']:
                    end_time = datetime.combine(filters['end_date'], datetime.max.time())
                    params['end_time'] = end_time.isoformat()
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/history/queries",
                params=params,
                headers=headers,
                timeout=5
            )
            
            if response.status_code == 200:
                return response.json().get('items', [])
            else:
                st.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code}). –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.")
                return self._get_demo_history(filters)
                
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.")
            return self._get_demo_history(filters)
    
    def _get_demo_history(self, filters: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        import random
        
        demo_queries = [
            {
                'id': f'demo_{i}',
                'type': random.choice(['search', 'chat', 'upload', 'download', 'analysis']),
                'query_text': f'–î–µ–º–æ –∑–∞–ø—Ä–æ—Å {i}: –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {random.choice(["–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", "—Ç–∞–±–ª–∏—Ü–∞—Ö", "–∞–Ω–∞–ª–∏–∑–µ", "–¥–∞–Ω–Ω—ã—Ö"])}',
                'timestamp': (datetime.now() - timedelta(hours=random.randint(1, 72))).isoformat(),
                'status': random.choice(['success', 'success', 'success', 'error']),  # 75% —É—Å–ø–µ—à–Ω—ã—Ö
                'response_time': round(random.uniform(0.5, 3.0), 2),
                'results_count': random.randint(0, 25),
                'user_id': st.session_state.get('user_info', {}).get('id', 'demo_user'),
                'metadata': {
                    'ip_address': f'192.168.1.{random.randint(1, 254)}',
                    'user_agent': 'Mozilla/5.0 (Demo Browser)',
                    'session_id': f'demo_session_{i}'
                }
            }
            for i in range(1, 21)  # 20 –¥–µ–º–æ –∑–∞–ø–∏—Å–µ–π
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if filters['types']:
            demo_queries = [q for q in demo_queries if q['type'] in filters['types']]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if filters['status']:
            status_map = {'–£—Å–ø–µ—à–Ω–æ': 'success', '–û—à–∏–±–∫–∞': 'error', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ': 'pending'}
            status_filter = [status_map.get(s, s) for s in filters['status']]
            demo_queries = [q for q in demo_queries if q['status'] in status_filter]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
        if filters['search_text']:
            search_text = filters['search_text'].lower()
            demo_queries = [q for q in demo_queries if search_text in q['query_text'].lower()]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if filters['sort_by'] == "–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)":
            demo_queries.sort(key=lambda x: x['timestamp'], reverse=True)
        elif filters['sort_by'] == "–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)":
            demo_queries.sort(key=lambda x: x['timestamp'])
        elif filters['sort_by'] == "–ü–æ —Ç–∏–ø—É":
            demo_queries.sort(key=lambda x: x['type'])
        elif filters['sort_by'] == "–ü–æ —Å—Ç–∞—Ç—É—Å—É":
            demo_queries.sort(key=lambda x: x['status'])
        
        return demo_queries
    
    def _render_statistics(self, history_data: List[Dict[str, Any]]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        if not history_data:
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_queries = len(history_data)
        successful_queries = len([q for q in history_data if q.get('status') == 'success'])
        failed_queries = len([q for q in history_data if q.get('status') == 'error'])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = {}
        for query in history_data:
            query_type = query.get('type', 'unknown')
            if query_type not in type_stats:
                type_stats[query_type] = 0
            type_stats[query_type] += 1
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        recent_queries = len([q for q in history_data 
                            if datetime.fromisoformat(q.get('timestamp', '')).replace(tzinfo=None) > 
                            datetime.now() - timedelta(hours=24)])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                value=total_queries,
                delta=f"+{recent_queries} –∑–∞ 24—á"
            )
        
        with col2:
            st.metric(
                label="–£—Å–ø–µ—à–Ω—ã—Ö",
                value=successful_queries,
                delta=f"{successful_queries/total_queries*100:.1f}%"
            )
        
        with col3:
            st.metric(
                label="–û—à–∏–±–æ–∫",
                value=failed_queries,
                delta=f"{failed_queries/total_queries*100:.1f}%"
            )
        
        with col4:
            avg_response_time = sum([q.get('response_time', 0) for q in history_data if q.get('response_time')]) / max(1, total_queries)
            st.metric(
                label="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
                value=f"{avg_response_time:.2f}s"
            )
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º
        if type_stats:
            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:**")
            type_df = pd.DataFrame([
                {'–¢–∏–ø': self.history_types.get(k, k), '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': v}
                for k, v in type_stats.items()
            ])
            st.bar_chart(type_df.set_index('–¢–∏–ø'))
    
    def _render_history_list(self, history_data: List[Dict[str, Any]], filters: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if not history_data:
            st.info("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        items_per_page = st.selectbox("–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", [10, 25, 50, 100], key="history_pagination")
        
        total_pages = (len(history_data) + items_per_page - 1) // items_per_page
        current_page = st.selectbox("–°—Ç—Ä–∞–Ω–∏—Ü–∞", range(1, total_pages + 1), key="history_page")
        
        start_idx = (current_page - 1) * items_per_page
        end_idx = start_idx + items_per_page
        page_data = history_data[start_idx:end_idx]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        for i, query in enumerate(page_data):
            self._render_query_item(query, start_idx + i)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if total_pages > 1:
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")
    
    def _render_query_item(self, query: Dict[str, Any], index: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        with st.expander(
            f"{self.history_types.get(query.get('type', 'unknown'), '‚ùì')} "
            f"{query.get('query_text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:50]}...",
            expanded=False
        ):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.write(f"**–ó–∞–ø—Ä–æ—Å:** {query.get('query_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.write(f"**–¢–∏–ø:** {self.history_types.get(query.get('type', 'unknown'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"**–í—Ä–µ–º—è:** {query.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                if query.get('response_time'):
                    st.write(f"**–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {query.get('response_time'):.2f}—Å")
                
                # –°—Ç–∞—Ç—É—Å
                status = query.get('status', 'unknown')
                if status == 'success':
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                elif status == 'error':
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {query.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    st.warning("‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if query.get('results_count'):
                    st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {query.get('results_count')}")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if query.get('metadata'):
                    with st.expander("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", expanded=False):
                        st.json(query['metadata'])
            
            with col2:
                # –î–µ–π—Å—Ç–≤–∏—è
                if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", key=f"repeat_{index}"):
                    self._repeat_query(query)
                
                if st.button("üìä –î–µ—Ç–∞–ª–∏", key=f"details_{index}"):
                    self._show_query_details(query)
                
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{index}"):
                    self._export_query(query)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
                if query.get('user_id') == st.session_state.get('user_info', {}).get('id'):
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{index}"):
                        self._delete_query(query)
    
    def _repeat_query(self, query: Dict[str, Any]):
        """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        query_type = query.get('type')
        query_text = query.get('query_text')
        
        if query_type == 'search':
            st.session_state['search_query'] = query_text
            st.switch_page("üîç –ü–æ–∏—Å–∫")
        elif query_type == 'chat':
            st.session_state['chat_message'] = query_text
            st.switch_page("üí¨ –ß–∞—Ç")
        else:
            st.info(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ '{query_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    def _show_query_details(self, query: Dict[str, Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        st.subheader("üìä –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞")
        
        # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/history/queries/{query.get('id')}",
                headers=headers
            )
            
            if response.status_code == 200:
                details = response.json()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    st.write(f"‚Ä¢ ID: {details.get('id')}")
                    st.write(f"‚Ä¢ –¢–∏–ø: {details.get('type')}")
                    st.write(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {details.get('status')}")
                    st.write(f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {details.get('timestamp')}")
                    st.write(f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {details.get('response_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}—Å")
                
                with col2:
                    st.write("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    st.write(f"‚Ä¢ IP –∞–¥—Ä–µ—Å: {details.get('ip_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    st.write(f"‚Ä¢ User Agent: {details.get('user_agent', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    st.write(f"‚Ä¢ –°–µ—Å—Å–∏—è: {details.get('session_id', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
                # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
                st.write("**–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:**")
                st.text_area("–ó–∞–ø—Ä–æ—Å", value=details.get('query_text', ''), height=100, disabled=True)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if details.get('results'):
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:**")
                    st.json(details['results'])
                
                # –û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if details.get('error_details'):
                    st.write("**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**")
                    st.error(details['error_details'])
                
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {response.status_code}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _export_query(self, query: Dict[str, Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞"""
        export_data = {
            'query_id': query.get('id'),
            'type': query.get('type'),
            'query_text': query.get('query_text'),
            'timestamp': query.get('timestamp'),
            'status': query.get('status'),
            'response_time': query.get('response_time'),
            'results_count': query.get('results_count'),
            'metadata': query.get('metadata', {})
        }
        
        # –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # JSON
            json_str = json.dumps(export_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• JSON",
                data=json_str,
                file_name=f"query_{query.get('id')}.json",
                mime="application/json"
            )
        
        with col2:
            # CSV
            csv_data = pd.DataFrame([export_data])
            csv_str = csv_data.to_csv(index=False)
            st.download_button(
                label="üì• CSV",
                data=csv_str,
                file_name=f"query_{query.get('id')}.csv",
                mime="text/csv"
            )
        
        with col3:
            # TXT
            txt_content = f"""
–ó–∞–ø—Ä–æ—Å ID: {export_data['query_id']}
–¢–∏–ø: {export_data['type']}
–¢–µ–∫—Å—Ç: {export_data['query_text']}
–í—Ä–µ–º—è: {export_data['timestamp']}
–°—Ç–∞—Ç—É—Å: {export_data['status']}
–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {export_data['response_time']}—Å
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {export_data['results_count']}
            """.strip()
            
            st.download_button(
                label="üì• TXT",
                data=txt_content,
                file_name=f"query_{query.get('id')}.txt",
                mime="text/plain"
            )
    
    def _delete_query(self, query: Dict[str, Any]):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        if st.button("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", key=f"confirm_delete_{query.get('id')}"):
            try:
                headers = {}
                if self.access_token:
                    headers["Authorization"] = f"Bearer {self.access_token}"
                
                response = requests.delete(
                    f"{self.api_base_url}/api/v1/history/queries/{query.get('id')}",
                    headers=headers
                )
                
                if response.status_code == 200:
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _render_history_actions(self, history_data: List[Dict[str, Any]]):
        """–î–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
        st.divider()
        st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏", key="export_all_history"):
                self._export_all_history(history_data)
        
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
                self._clear_history()
        
        with col3:
            if st.button("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", key="analyze_trends"):
                self._analyze_trends(history_data)
        
        with col4:
            if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", key="history_settings"):
                self._show_history_settings()
    
    def _export_all_history(self, history_data: List[Dict[str, Any]]):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏"""
        if not history_data:
            st.warning("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df = pd.DataFrame(history_data)
        
        # –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # CSV
            csv_str = export_df.to_csv(index=False)
            st.download_button(
                label="üì• CSV (–≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)",
                data=csv_str,
                file_name=f"query_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Excel (—Ç—Ä–µ–±—É–µ—Ç openpyxl)
            try:
                buffer = BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    export_df.to_excel(writer, sheet_name='–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤', index=False)
                
                st.download_button(
                    label="üì• Excel (–≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)",
                    data=buffer.getvalue(),
                    file_name=f"query_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            except ImportError:
                st.warning("üì• –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openpyxl: `pip install openpyxl`")
                st.download_button(
                    label="üì• Excel (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                    data="",
                    file_name="",
                    disabled=True
                )
        
        with col3:
            # JSON
            json_str = export_df.to_json(orient='records', indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• JSON (–≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)",
                data=json_str,
                file_name=f"query_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    def _clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        if st.button("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏", key="confirm_clear_all"):
            try:
                headers = {}
                if self.access_token:
                    headers["Authorization"] = f"Bearer {self.access_token}"
                
                response = requests.delete(
                    f"{self.api_base_url}/api/v1/history/queries/clear",
                    headers=headers
                )
                
                if response.status_code == 200:
                    st.success("‚úÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.status_code}")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def _analyze_trends(self, history_data: List[Dict[str, Any]]):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
        
        if not history_data:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = pd.DataFrame(history_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['hour'] = df['timestamp'].dt.hour
        df['day_of_week'] = df['timestamp'].dt.day_name()
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            hourly_activity = df.groupby('hour').size()
            st.write("**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:**")
            st.bar_chart(hourly_activity)
        
        with col2:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            daily_activity = df.groupby('day_of_week').size()
            st.write("**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
            st.bar_chart(daily_activity)
        
        # –¢—Ä–µ–Ω–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        st.write("**–¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        df['date'] = df['timestamp'].dt.date
        daily_counts = df.groupby('date').size().reset_index(name='count')
        st.line_chart(daily_counts.set_index('date'))
    
    def _show_history_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        
        st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        col1, col2 = st.columns(2)
        
        with col1:
            st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞", value=True, disabled=True)
            st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", value=True, disabled=True)
            st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫", value=True, disabled=True)
        
        with col2:
            retention_days = st.selectbox(
                "–•—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (–¥–Ω–µ–π)",
                [7, 30, 90, 365, -1],
                index=1,
                disabled=True
            )
            
            if retention_days == -1:
                st.caption("–ë–µ—Å—Å—Ä–æ—á–Ω–æ")
            else:
                st.caption(f"{retention_days} –¥–Ω–µ–π")
    
    def _render_quick_access(self, history_data: List[Dict[str, Any]]):
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–∞–º"""
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
        
        if not history_data:
            return
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        query_counts = {}
        successful_queries = [q for q in history_data if q.get('status') == 'success']
        
        for query in successful_queries:
            query_text = query.get('query_text', '')
            if query_text:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
                normalized = ' '.join(query_text.lower().split())
                if len(normalized) > 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                    query_counts[normalized] = query_counts.get(normalized, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        frequent_queries = sorted(query_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        if frequent_queries:
            st.write("**–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**")
            
            for i, (query, count) in enumerate(frequent_queries):
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.write(f"{i+1}. {query}")
                
                with col2:
                    st.write(f"({count} —Ä–∞–∑)")
                
                with col3:
                    if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", key=f"quick_repeat_{i}"):
                        self._repeat_quick_query(query)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.write("**–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫", key="quick_last_search"):
                self._repeat_last_query('search')
        
        with col2:
            if st.button("üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç", key="quick_last_chat"):
                self._repeat_last_query('chat')
        
        with col3:
            if st.button("üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", key="quick_activity_analysis"):
                self._show_activity_analysis(history_data)
        
        with col4:
            if st.button("üìà –¢—Ä–µ–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤", key="quick_query_trends"):
                self._show_query_trends(history_data)
    
    def _repeat_quick_query(self, query_text: str):
        """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if any(word in query_text.lower() for word in ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∏—Å–∫–∞—Ç—å', '–Ω–∞–π—Ç–∏']):
            st.session_state['search_query'] = query_text
            st.switch_page("üîç –ü–æ–∏—Å–∫")
        else:
            st.session_state['chat_message'] = query_text
            st.switch_page("üí¨ –ß–∞—Ç")
    
    def _repeat_last_query(self, query_type: str):
        """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not hasattr(st.session_state, 'query_history') or not st.session_state.query_history:
            st.warning("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        last_query = None
        for query in reversed(st.session_state.query_history):
            if query.get('type') == query_type:
                last_query = query
                break
        
        if last_query:
            query_text = last_query.get('query_text', '')
            if query_type == 'search':
                st.session_state['search_query'] = query_text
                st.switch_page("üîç –ü–æ–∏—Å–∫")
            elif query_type == 'chat':
                st.session_state['chat_message'] = query_text
                st.switch_page("üí¨ –ß–∞—Ç")
        else:
            st.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ '{query_type}'")
    
    def _show_activity_analysis(self, history_data: List[Dict[str, Any]]):
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        if not history_data:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = pd.DataFrame(history_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['hour'] = df['timestamp'].dt.hour
        df['day_of_week'] = df['timestamp'].dt.day_name()
        df['date'] = df['timestamp'].dt.date
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            hourly_activity = df.groupby('hour').size()
            st.write("**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:**")
            st.bar_chart(hourly_activity)
        
        with col2:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            daily_activity = df.groupby('day_of_week').size()
            st.write("**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
            st.bar_chart(daily_activity)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:**")
        type_stats = df['type'].value_counts()
        st.bar_chart(type_stats)
        
        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        success_rate = len(df[df['status'] == 'success']) / len(df) * 100
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤", f"{success_rate:.1f}%")
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        avg_response_time = df['response_time'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{avg_response_time:.2f}—Å")
    
    def _show_query_trends(self, history_data: List[Dict[str, Any]]):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if not history_data:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
            return
        
        df = pd.DataFrame(history_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['date'] = df['timestamp'].dt.date
        
        # –¢—Ä–µ–Ω–¥ –ø–æ –¥–Ω—è–º
        daily_counts = df.groupby('date').size().reset_index(name='count')
        st.write("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º:**")
        st.line_chart(daily_counts.set_index('date'))
        
        # –¢—Ä–µ–Ω–¥ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        st.write("**–¢—Ä–µ–Ω–¥ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤:**")
        type_trends = df.groupby(['date', 'type']).size().unstack(fill_value=0)
        st.line_chart(type_trends)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤
        all_queries = ' '.join(df['query_text'].fillna('').astype(str))
        words = all_queries.lower().split()
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '—É', '–∑–∞', '–ø–æ–¥', '–Ω–∞–¥', '–ø—Ä–∏', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', '–±–µ–∑', '–ø—Ä–æ', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∏–µ'}
        words = [word for word in words if len(word) > 3 and word not in stop_words]
        
        if words:
            from collections import Counter
            word_counts = Counter(words)
            top_words = word_counts.most_common(10)
            
            st.write("**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö:**")
            for word, count in top_words:
                st.write(f"‚Ä¢ {word}: {count}")
