"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import streamlit as st
import requests
from typing import Dict, Any, Optional


class LoginForm:
    """–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    
    def __init__(self, api_base_url: str):
        self.api_base_url = api_base_url
    
    def render(self) -> Optional[Dict[str, Any]]:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞"""
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="text-align: center; padding: 2rem;">
            <h1>üîê RAG Platform</h1>
            <p style="font-size: 1.2rem; color: #666;">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            with st.form("login_form", clear_on_submit=False):
                st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                
                username = st.text_input(
                    "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ admin/admin123 –¥–ª—è –¥–µ–º–æ"
                )
                
                password = st.text_input(
                    "–ü–∞—Ä–æ–ª—å",
                    type="password",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    remember_me = st.checkbox("–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è")
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω–µ —Ñ–æ—Ä–º—ã
                    pass
                
                # –ö–Ω–æ–ø–∫–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    submitted = st.form_submit_button("üîê –í–æ–π—Ç–∏", use_container_width=True)
                
                with col2:
                    demo_mode = st.form_submit_button("üë§ –î–µ–º–æ —Ä–µ–∂–∏–º", use_container_width=True)
                    if demo_mode:
                        username = "admin"
                        password = "admin123"
                        submitted = True
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if submitted and username and password:
                    return self._authenticate(username, password, remember_me)
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" –≤–Ω–µ —Ñ–æ—Ä–º—ã
        forgot_password = st.button("–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", type="secondary")
        if forgot_password:
            st.info("–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        return None
    
    def _authenticate(self, username: str, password: str, remember_me: bool) -> Optional[Dict[str, Any]]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥..."):
                response = requests.post(
                    f"{self.api_base_url}/api/v1/auth/login",
                    json={"username": username, "password": password},
                    timeout=10
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
                    if remember_me:
                        st.session_state.remember_me = True
                    
                    st.success("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return result
                else:
                    error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}")
                    return None
                    
        except requests.exceptions.Timeout:
            st.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return None
        except requests.exceptions.ConnectionError:
            st.error("üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.")
            return None
        except Exception as e:
            st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return None


class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_info: Dict[str, Any]):
        self.user_info = user_info
    
    def render_sidebar(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        st.divider()
        st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        
        user = self.user_info
        
        if not user:
            st.warning("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.write(f"**–ò–º—è:** {user.get('username', 'N/A')}")
        st.write(f"**Email:** {user.get('email', 'N/A')}")
        st.write(f"**–¢–µ–Ω–∞–Ω—Ç:** {user.get('tenant_id', 'N/A')}")
        st.write(f"**–†–æ–ª—å:** {user.get('role_id', 'N/A')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user.get('created_at'):
            st.write(f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user['created_at']}")
        
        if user.get('last_login'):
            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {user['last_login']}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                st.info("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        with col2:
            if st.button("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", use_container_width=True):
                st.info("–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def render_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ"""
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.title("üîç RAG Platform")
            st.markdown("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        with col2:
            if self.user_info:
                username = self.user_info.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                role_id = self.user_info.get('role_id', 0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
                role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role_id == 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                role_icon = "üëë" if role_id == 1 else "üë§"
                
                st.info(f"{role_icon} {username}\n**{role_name}**")
        
        with col3:
            if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
                st.session_state.clear()
                st.rerun()
    
    def render_settings_page(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        
        user = self.user_info
        
        if not user:
            st.warning("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        st.subheader("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user.get('username', 'N/A')}")
            st.write(f"**Email:** {user.get('email', 'N/A')}")
        
        with col2:
            st.write(f"**–¢–µ–Ω–∞–Ω—Ç:** {user.get('tenant_id', 'N/A')}")
            st.write(f"**–†–æ–ª—å:** {user.get('role_id', 'N/A')}")
        
        st.divider()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        st.subheader("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", use_container_width=True):
                st.info("–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        with col2:
            if st.button("üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", use_container_width=True):
                st.info("–§—É–Ω–∫—Ü–∏—è 2FA –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        st.divider()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        st.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        email_notifications = st.checkbox("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True)
        push_notifications = st.checkbox("Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=False)
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        st.divider()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        if st.button("üí¨ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"):
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        st.divider()
        st.subheader("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        st.warning("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")
        
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", type="secondary"):
            st.error("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
