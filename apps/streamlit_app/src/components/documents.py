"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
"""
import streamlit as st
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
import pandas as pd


class DocumentList:
    """–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
    
    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        st.header("üìö –î–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
        
        with col2:
            size = st.selectbox("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", [10, 20, 50, 100])
        
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.rerun()
        
        # –§–∏–ª—å—Ç—Ä—ã
        with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                status_filter = st.multiselect(
                    "–°—Ç–∞—Ç—É—Å",
                    ["uploaded", "processing", "completed", "failed"],
                    default=["completed"],
                    format_func=lambda x: {
                        "uploaded": "–ó–∞–≥—Ä—É–∂–µ–Ω",
                        "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
                        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω",
                        "failed": "–û—à–∏–±–∫–∞"
                    }[x]
                )
                
                mime_type_filter = st.multiselect(
                    "–¢–∏–ø —Ñ–∞–π–ª–∞",
                    ["application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", 
                     "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "text/html", "text/plain"],
                    default=[],
                    format_func=lambda x: {
                        "application/pdf": "PDF",
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "DOCX",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "XLSX",
                        "text/html": "HTML",
                        "text/plain": "TXT"
                    }[x]
                )
            
            with col2:
                date_from = st.date_input(
                    "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å",
                    value=None
                )
                
                date_to = st.date_input(
                    "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ",
                    value=None
                )
            
            with col3:
                tags_filter = st.multiselect(
                    "–¢–µ–≥–∏",
                    ["–≤–∞–∂–Ω–æ–µ", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–æ—Ç—á–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π"],
                    default=[]
                )
                
                min_size = st.number_input(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (MB)",
                    min_value=0,
                    value=0
                )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
            data = self._get_documents(
                page=page,
                size=size,
                status_filter=status_filter,
                mime_type_filter=mime_type_filter,
                date_from=date_from,
                date_to=date_to,
                tags_filter=tags_filter,
                min_size=min_size
            )
            
            if "error" in data:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data['error']}")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_docs = data.get('total', 0)
            if total_docs > 0:
                st.success(f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                self._render_documents(data.get('documents', []))
                
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                pages = data.get('pages', 1)
                if pages > 1:
                    st.write(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {data.get('page', 1)} –∏–∑ {pages}")
                    
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                    col1, col2, col3, col4, col5 = st.columns(5)
                    
                    with col1:
                        if page > 1:
                            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"):
                                st.session_state.current_page = page - 1
                                st.rerun()
                    
                    with col3:
                        st.write(f"**{page}**")
                    
                    with col5:
                        if page < pages:
                            if st.button("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è"):
                                st.session_state.current_page = page + 1
                                st.rerun()
            else:
                st.info("üì≠ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
    
    def _get_documents(self, **kwargs) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                "page": kwargs["page"],
                "size": kwargs["size"]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if kwargs["status_filter"]:
                params["status"] = ",".join(kwargs["status_filter"])
            
            if kwargs["mime_type_filter"]:
                params["mime_type"] = ",".join(kwargs["mime_type_filter"])
            
            if kwargs["date_from"]:
                params["date_from"] = kwargs["date_from"].isoformat()
            
            if kwargs["date_to"]:
                params["date_to"] = kwargs["date_to"].isoformat()
            
            if kwargs["tags_filter"]:
                params["tags"] = ",".join(kwargs["tags_filter"])
            
            if kwargs["min_size"] > 0:
                params["min_size"] = kwargs["min_size"] * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/documents",
                params=params,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {error_msg}"}
                
        except requests.exceptions.Timeout:
            return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"}
        except requests.exceptions.ConnectionError:
            return {"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"}
        except Exception as e:
            return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    def _render_documents(self, documents: List[Dict[str, Any]]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        for i, doc in enumerate(documents):
            self._render_document(doc, i)
    
    def _render_document(self, doc: Dict[str, Any], index: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
        mime_type = doc.get('mime_type', '')
        if 'pdf' in mime_type:
            icon = "üìÑ"
        elif 'word' in mime_type:
            icon = "üìù"
        elif 'spreadsheet' in mime_type:
            icon = "üìä"
        elif 'html' in mime_type:
            icon = "üåê"
        elif 'text' in mime_type:
            icon = "üìÉ"
        else:
            icon = "üìé"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status = doc.get('status', 'unknown')
        if status == 'completed':
            status_color = "success"
            status_icon = "‚úÖ"
        elif status == 'processing':
            status_color = "info"
            status_icon = "‚è≥"
        elif status == 'failed':
            status_color = "error"
            status_icon = "‚ùå"
        else:
            status_color = "warning"
            status_icon = "‚ö†Ô∏è"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        title = doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        with st.expander(f"{icon} {title} {status_icon}"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.write(f"**ID:** {doc.get('id', 'N/A')}")
                st.write(f"**–ü—É—Ç—å:** {doc.get('source_path', 'N/A')}")
                st.write(f"**–¢–∏–ø:** {doc.get('mime_type', 'N/A')}")
                st.write(f"**–ß–∞–Ω–∫–æ–≤:** {doc.get('chunk_count', 0)}")
                
                # –¢–µ–≥–∏
                tags = doc.get('tags', [])
                if tags:
                    st.write("**–¢–µ–≥–∏:**")
                    for tag in tags:
                        st.write(f"- {tag}")
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                description = doc.get('description', '')
                if description:
                    st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
                    st.write(description)
            
            with col2:
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.write(f"**–†–∞–∑–º–µ—Ä:** {doc.get('size_bytes', 'N/A')} –±–∞–π—Ç")
                st.write(f"**–ó–∞–≥—Ä—É–∂–µ–Ω:** {doc.get('created_at', 'N/A')}")
                if doc.get('sha256'):
                    st.write(f"**SHA256:** {doc['sha256'][:16]}...")
                
                # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {status_icon} {status}")
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if status == 'processing':
                    progress = doc.get('processing_progress', 0)
                    st.progress(progress / 100)
                    st.write(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with st.expander("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    metadata = doc.get('metadata', {})
                    if metadata:
                        for key, value in metadata.items():
                            st.write(f"- **{key}:** {value}")
                    else:
                        st.write("–ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                
                with col2:
                    st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    st.write(f"- –°—Ç—Ä–∞–Ω–∏—Ü: {doc.get('page_count', 'N/A')}")
                    st.write(f"- –¢–∞–±–ª–∏—Ü: {doc.get('table_count', 'N/A')}")
                    st.write(f"- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {doc.get('image_count', 'N/A')}")
                    st.write(f"- –°–ª–æ–≤: {doc.get('word_count', 'N/A')}")
            
            # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            st.divider()
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{index}"):
                    st.session_state.selected_document = doc
                    st.switch_page("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            with col2:
                if st.button(f"üîç –ß–∞–Ω–∫–∏", key=f"chunks_{index}"):
                    st.session_state.selected_document = doc
                    st.switch_page("üîç –ß–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            with col3:
                if st.button(f"üìä –ê–Ω–∞–ª–∏–∑", key=f"analyze_{index}"):
                    st.session_state.selected_document = doc
                    st.switch_page("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            with col4:
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{index}"):
                    if self._delete_document(doc.get('id')):
                        st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    def _delete_document(self, doc_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.delete(
                f"{self.api_base_url}/api/v1/documents/{doc_id}",
                headers=headers,
                timeout=30
            )
            
            return response.status_code == 200
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
            return False


class DocumentViewer:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    def __init__(self, api_base_url: str, access_token: str = None):
        self.api_base_url = api_base_url
        self.access_token = access_token
    
    def render(self, document: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        st.header(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
                st.switch_page("üìö –î–æ–∫—É–º–µ–Ω—Ç—ã")
        
        with col2:
            st.write(f"**ID:** {document.get('id', 'N/A')} | **–°—Ç–∞—Ç—É—Å:** {document.get('status', 'N/A')}")
        
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {document.get('title', 'N/A')}")
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {document.get('description', 'N/A')}")
            st.write(f"**–ü—É—Ç—å:** {document.get('source_path', 'N/A')}")
            st.write(f"**–¢–∏–ø:** {document.get('mime_type', 'N/A')}")
            
            # –¢–µ–≥–∏
            tags = document.get('tags', [])
            if tags:
                st.write("**–¢–µ–≥–∏:**")
                for tag in tags:
                    st.write(f"- {tag}")
        
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.write(f"**–†–∞–∑–º–µ—Ä:** {document.get('size_bytes', 'N/A')} –±–∞–π—Ç")
            st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü:** {document.get('page_count', 'N/A')}")
            st.write(f"**–ß–∞–Ω–∫–æ–≤:** {document.get('chunk_count', 'N/A')}")
            st.write(f"**–¢–∞–±–ª–∏—Ü:** {document.get('table_count', 'N/A')}")
            st.write(f"**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {document.get('image_count', 'N/A')}")
            st.write(f"**–°–ª–æ–≤:** {document.get('word_count', 'N/A')}")
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        st.subheader("üìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_count = document.get('page_count', 1)
        if page_count > 1:
            selected_page = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                range(1, page_count + 1),
                index=0
            )
        else:
            selected_page = 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = self._get_page_content(document.get('id'), selected_page)
        
        if content:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if content.get('type') == 'text':
                st.write("**–¢–µ–∫—Å—Ç:**")
                st.write(content.get('content', ''))
            
            elif content.get('type') == 'table':
                st.write("**–¢–∞–±–ª–∏—Ü–∞:**")
                table_data = content.get('table_data', [])
                if table_data:
                    df = pd.DataFrame(table_data)
                    st.dataframe(df)
                else:
                    st.write("–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            elif content.get('type') == 'image':
                st.write("**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**")
                image_url = content.get('image_url')
                if image_url:
                    st.image(image_url)
                else:
                    st.write("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if content.get('metadata'):
                with st.expander("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
                    metadata = content['metadata']
                    for key, value in metadata.items():
                        st.write(f"**{key}:** {value}")
        else:
            st.info("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üîç –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"):
                st.info("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        with col2:
            if st.button("üí¨ –ß–∞—Ç –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"):
                st.info("–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        with col3:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç"):
                st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        with col4:
            if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"):
                st.success("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    
    def _get_page_content(self, doc_id: str, page: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            headers = {}
            if self.access_token:
                headers["Authorization"] = f"Bearer {self.access_token}"
            
            response = requests.get(
                f"{self.api_base_url}/api/v1/documents/{doc_id}/pages/{page}",
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}")
            return None
