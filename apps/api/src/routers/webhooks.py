"""
–†–æ—É—Ç–µ—Ä –¥–ª—è webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""

from fastapi import APIRouter, HTTPException, Depends, Request, Header
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
import logging
import time
import hashlib
import hmac

from ..schemas.webhooks import (
    WebhookPayload,
    WebhookResponse,
    WebhookEvent,
    WebhookDelivery
)
from ..services.webhook_service import WebhookService
from ..services.authorization import get_current_user, User
from ..settings import get_settings

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
webhook_service = WebhookService()
settings = get_settings()

def verify_webhook_signature(
    request: Request,
    x_hub_signature_256: Optional[str] = Header(None),
    x_hub_signature: Optional[str] = Header(None)
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - GitHub-style HMAC SHA256
    - –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç HMAC SHA1
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = request.body()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å SHA256 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if x_hub_signature_256:
            expected_signature = f"sha256={hmac.new(settings.webhook_secret.encode(), body, hashlib.sha256).hexdigest()}"
            if hmac.compare_digest(x_hub_signature_256, expected_signature):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å SHA1 (fallback)
        if x_hub_signature:
            expected_signature = f"sha1={hmac.new(settings.webhook_secret.encode(), body, hashlib.sha1).hexdigest()}"
            if hmac.compare_digest(x_hub_signature, expected_signature):
                return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook: {e}")
        return False

@router.post("/ingest", response_model=WebhookResponse)
async def webhook_ingest(
    request: Request,
    payload: WebhookPayload,
    x_hub_signature_256: Optional[str] = Header(None),
    x_hub_signature: Optional[str] = Header(None)
):
    """
    Webhook –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - GitHub webhooks
    - GitLab webhooks
    - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ HMAC –ø–æ–¥–ø–∏—Å–∏
    """
    try:
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not verify_webhook_signature(request, x_hub_signature_256, x_hub_signature):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            raise HTTPException(
                status_code=401,
                detail="Unauthorized webhook signature"
            )
        
        logger.info(f"üîó Webhook ingest: {payload.event_type} –æ—Ç {payload.source}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        result = await webhook_service.process_ingest_webhook(
            payload=payload
        )
        
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.3f}s")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}"
        )

@router.post("/airflow", response_model=WebhookResponse)
async def webhook_airflow(
    request: Request,
    payload: WebhookPayload,
    x_hub_signature_256: Optional[str] = Header(None),
    x_hub_signature: Optional[str] = Header(None)
):
    """
    Webhook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Airflow
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç:
    - DAG –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - DAG –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    - DAG –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_webhook_signature(request, x_hub_signature_256, x_hub_signature):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook Airflow")
            raise HTTPException(
                status_code=401,
                detail="Unauthorized webhook signature"
            )
        
        logger.info(f"üîÑ Webhook Airflow: {payload.event_type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook Airflow
        result = await webhook_service.process_airflow_webhook(
            payload=payload
        )
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook Airflow: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ webhook Airflow: {str(e)}"
        )

@router.post("/external", response_model=WebhookResponse)
async def webhook_external(
    request: Request,
    payload: WebhookPayload,
    x_hub_signature_256: Optional[str] = Header(None),
    x_hub_signature: Optional[str] = Header(None)
):
    """
    Webhook –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - CRM —Å–∏—Å—Ç–µ–º—ã
    - Helpdesk —Å–∏—Å—Ç–µ–º—ã
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - –ê–ª–µ—Ä—Ç—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_webhook_signature(request, x_hub_signature_256, x_hub_signature):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–Ω–µ—à–Ω–µ–≥–æ webhook")
            raise HTTPException(
                status_code=401,
                detail="Unauthorized webhook signature"
            )
        
        logger.info(f"üåê –í–Ω–µ—à–Ω–∏–π webhook: {payload.event_type} –æ—Ç {payload.source}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π webhook
        result = await webhook_service.process_external_webhook(
            payload=payload
        )
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ webhook: {str(e)}"
        )

@router.get("/events", response_model=List[WebhookEvent])
async def list_webhook_events(
    current_user: User = Depends(get_current_user),
    source: Optional[str] = None,
    event_type: Optional[str] = None,
    limit: int = 100,
    offset: int = 0
):
    """
    –°–ø–∏—Å–æ–∫ webhook —Å–æ–±—ã—Ç–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ò—Å—Ç–æ—Ä–∏—é webhook –≤—ã–∑–æ–≤–æ–≤
    - –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π
    """
    try:
        logger.info(f"üìã –°–ø–∏—Å–æ–∫ webhook —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        events = await webhook_service.list_webhook_events(
            user=current_user,
            source=source,
            event_type=event_type,
            limit=limit,
            offset=offset
        )
        
        return events
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏–π: {str(e)}"
        )

@router.get("/events/{event_id}", response_model=WebhookEvent)
async def get_webhook_event(
    event_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –î–µ—Ç–∞–ª–∏ webhook —Å–æ–±—ã—Ç–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
    - Payload
    - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    try:
        logger.info(f"üìñ –î–µ—Ç–∞–ª–∏ webhook —Å–æ–±—ã—Ç–∏—è {event_id}")
        
        event = await webhook_service.get_webhook_event(
            event_id=event_id,
            user=current_user
        )
        
        if not event:
            raise HTTPException(
                status_code=404,
                detail="Webhook —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        return event
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏—è: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å–æ–±—ã—Ç–∏—è: {str(e)}"
        )

@router.post("/events/{event_id}/retry")
async def retry_webhook_event(
    event_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è
    
    –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏:
    - –û—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    try:
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è {event_id}")
        
        result = await webhook_service.retry_webhook_event(
            event_id=event_id,
            user=current_user
        )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        )

@router.get("/deliveries", response_model=List[WebhookDelivery])
async def list_webhook_deliveries(
    current_user: User = Depends(get_current_user),
    status: Optional[str] = None,
    limit: int = 100,
    offset: int = 0
):
    """
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ webhook
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    - –ü–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    - –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    try:
        logger.info(f"üì§ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ webhook –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        deliveries = await webhook_service.list_webhook_deliveries(
            user=current_user,
            status=status,
            limit=limit,
            offset=offset
        )
        
        return deliveries
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫: {str(e)}"
        )

@router.post("/test")
async def test_webhook(
    webhook_url: str,
    event_type: str = "test",
    payload: Optional[Dict[str, Any]] = None
):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
    - –û–±—Ä–∞–±–æ—Ç–∫–∏ payload
    - –û—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook: {webhook_url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π payload
        test_payload = payload or {
            "event_type": event_type,
            "source": "rag-platform",
            "timestamp": time.time(),
            "data": {
                "message": "Test webhook event",
                "test_id": f"test_{int(time.time())}"
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook
        result = await webhook_service.test_webhook(
            webhook_url=webhook_url,
            payload=test_payload
        )
        
        return {
            "message": "Webhook —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
            "webhook_url": webhook_url,
            "result": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {str(e)}"
        )

@router.get("/stats", response_model=Dict[str, Any])
async def get_webhook_statistics(
    period: str = "7d",
    current_user: User = Depends(get_current_user)
):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ webhook
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
    - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    """
    try:
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ webhook –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        stats = await webhook_service.get_webhook_statistics(
            period=period,
            user=current_user
        )
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.post("/configure")
async def configure_webhook(
    webhook_config: Dict[str, Any],
    current_user: User = Depends(get_current_user)
):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ webhook endpoints
    - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
    - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å retry –ª–æ–≥–∏–∫—É
    """
    try:
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        result = await webhook_service.configure_webhook(
            config=webhook_config,
            user=current_user
        )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {str(e)}"
        )

@router.delete("/configure/{webhook_id}")
async def delete_webhook_config(
    webhook_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook
    
    –£–¥–∞–ª—è–µ—Ç:
    - Webhook endpoint
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π
    - –°–µ–∫—Ä–µ—Ç—ã
    """
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {webhook_id}")
        
        await webhook_service.delete_webhook_config(
            webhook_id=webhook_id,
            user=current_user
        )
        
        return {"message": "Webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
        )
