"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from typing import List, Optional, Dict, Any
import logging
import time

from ..schemas.feedback import (
    FeedbackSubmission,
    FeedbackResponse,
    FeedbackType,
    FeedbackCategory,
    FeedbackAnalytics
)
from ..services.feedback_service import FeedbackService
from ..middleware.auth import get_current_user
from ..schemas.auth import User
from ..settings import get_settings
from fastapi.responses import JSONResponse

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
feedback_service = FeedbackService()
settings = get_settings()

@router.post("/submit", response_model=FeedbackResponse)
async def submit_feedback(
    feedback: FeedbackSubmission,
    current_user: User = Depends(get_current_user)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –û—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–æ–≤
    - –û—Ü–µ–Ω–∫—É –ø–æ–∏—Å–∫–∞
    - –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    """
    try:
        start_time = time.time()
        
        logger.info(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}: {feedback.feedback_type}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        result = await feedback_service.submit_feedback(
            feedback=feedback,
            user=current_user
        )
        
        submission_time = time.time() - start_time
        
        logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞ {submission_time:.3f}s")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/types", response_model=List[Dict[str, Any]])
async def get_feedback_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –û–ø–∏—Å–∞–Ω–∏—è
    """
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        
        types = await feedback_service.get_feedback_types()
        
        return types
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/user", response_model=List[FeedbackResponse])
async def get_user_feedback(
    current_user: User = Depends(get_current_user),
    feedback_type: Optional[FeedbackType] = Query(None),
    category: Optional[FeedbackCategory] = Query(None),
    limit: int = Query(50, ge=1, le=200),
    offset: int = Query(0, ge=0)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    """
    try:
        logger.info(f"üìã –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        feedback_list = await feedback_service.get_user_feedback(
            user=current_user,
            feedback_type=feedback_type,
            category=category,
            limit=limit,
            offset=offset
        )
        
        return feedback_list
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/analytics", response_model=FeedbackAnalytics)
async def get_feedback_analytics(
    period: str = Query("7d", regex="^(1d|7d|30d|90d)$"),
    feedback_type: Optional[FeedbackType] = Query(None),
    current_user: User = Depends(get_current_user)
):
    """
    –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    - –¢—Ä–µ–Ω–¥—ã
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
    - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
    """
    try:
        logger.info(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        analytics = await feedback_service.get_feedback_analytics(
            period=period,
            feedback_type=feedback_type,
            user=current_user
        )
        
        return analytics
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}"
        )

@router.get("/popular", response_model=List[Dict[str, Any]])
async def get_popular_feedback_topics(
    period: str = Query("7d", regex="^(1d|7d|30d|90d)$"),
    limit: int = Query(10, ge=1, le=50),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ß–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ —Ç–µ–º—ã
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    - –¢—Ä–µ–Ω–¥—ã
    """
    try:
        logger.info(f"üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        topics = await feedback_service.get_popular_feedback_topics(
            period=period,
            limit=limit,
            user=current_user
        )
        
        return topics
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º: {str(e)}"
        )

@router.put("/{feedback_id}")
async def update_feedback(
    feedback_id: str,
    feedback: FeedbackSubmission,
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å:
    - –û—Ü–µ–Ω–∫—É
    - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    - –ö–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    try:
        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ {feedback_id}")
        
        updated_feedback = await feedback_service.update_feedback(
            feedback_id=feedback_id,
            feedback=feedback,
            user=current_user
        )
        
        return updated_feedback
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.delete("/{feedback_id}")
async def delete_feedback(
    feedback_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    """
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ {feedback_id}")
        
        await feedback_service.delete_feedback(
            feedback_id=feedback_id,
            user=current_user
        )
        
        return {"message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.post("/bulk")
async def submit_bulk_feedback(
    feedback_list: List[FeedbackSubmission],
    current_user: User = Depends(get_current_user)
):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    try:
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {len(feedback_list)} –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        results = []
        for feedback in feedback_list:
            try:
                result = await feedback_service.submit_feedback(
                    feedback=feedback,
                    user=current_user
                )
                results.append({
                    "status": "success",
                    "feedback_id": result.feedback_id
                })
            except Exception as e:
                results.append({
                    "status": "error",
                    "error": str(e)
                })
        
        return {
            "message": "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
            "results": results,
            "total": len(feedback_list),
            "successful": len([r for r in results if r["status"] == "success"]),
            "failed": len([r for r in results if r["status"] == "error"])
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/export")
async def export_feedback(
    format: str = Query("json", regex="^(json|csv|pdf)$"),
    period: str = Query("30d", regex="^(1d|7d|30d|90d)$"),
    feedback_type: Optional[FeedbackType] = Query(None),
    current_user: User = Depends(get_current_user)
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –§–æ—Ä–º–∞—Ç—ã: JSON, CSV, PDF
    """
    try:
        logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        feedback_data = await feedback_service.get_user_feedback(
            user=current_user,
            feedback_type=feedback_type,
            limit=10000,  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            offset=0
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        export_data = await feedback_service.export_feedback(
            feedback_data=feedback_data,
            format=format,
            period=period
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = {
            "json": "application/json",
            "csv": "text/csv",
            "pdf": "application/pdf"
        }[format]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"feedback_export_{period}_{int(time.time())}.{format}"
        
        return JSONResponse(
            content=export_data,
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "Content-Type": content_type
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"
        )

@router.get("/stats/summary")
async def get_feedback_summary(
    current_user: User = Depends(get_current_user)
):
    """
    –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
    - –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    - –¢—Ä–µ–Ω–¥—ã
    """
    try:
        logger.info(f"üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        summary = await feedback_service.get_feedback_summary(
            user=current_user
        )
        
        return summary
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )
