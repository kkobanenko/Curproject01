"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
"""

from fastapi import APIRouter, HTTPException, Depends, UploadFile, File, Form, Query
from fastapi.responses import JSONResponse, FileResponse
from typing import List, Optional, Dict, Any
import logging
import time
import os

from ..schemas.documents import (
    DocumentUploadResponse,
    DocumentInfo,
    DocumentListResponse,
    DocumentStatus,
    DocumentMetadata
)
from ..schemas.common import PaginationParams
from ..services.document_service import DocumentService
from ..middleware.auth import get_current_user
from ..schemas.auth import User
from ..settings import get_settings

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
document_service = DocumentService()
settings = get_settings()

@router.post("/upload", response_model=DocumentUploadResponse)
async def upload_document(
    file: UploadFile = File(...),
    title: Optional[str] = Form(None),
    description: Optional[str] = Form(None),
    tags: Optional[str] = Form(None),
    current_user: User = Depends(get_current_user)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - PDF (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    - DOCX, XLSX
    - HTML, EML
    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, TIFF)
    """
    try:
        start_time = time.time()
        
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file.filename} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size and file.size > settings.max_file_size_mb * 1024 * 1024:
            raise HTTPException(
                status_code=413,
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size_mb} MB"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø
        if file.content_type not in settings.supported_mime_types:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        upload_result = await document_service.upload_document(
            file=file,
            title=title or file.filename,
            description=description,
            tags=tags.split(",") if tags else [],
            user=current_user
        )
        
        upload_time = time.time() - start_time
        
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {upload_time:.3f}s: {upload_result.document_id}")
        
        return upload_result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/", response_model=DocumentListResponse)
async def list_documents(
    current_user: User = Depends(get_current_user),
    pagination: PaginationParams = Depends(),
    status: Optional[DocumentStatus] = Query(None),
    mime_type: Optional[str] = Query(None),
    tags: Optional[str] = Query(None),
    date_from: Optional[str] = Query(None),
    date_to: Optional[str] = Query(None)
):
    """
    –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ:
    - –°—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –¢–∏–ø—É —Ñ–∞–π–ª–∞
    - –¢–µ–≥–∞–º
    - –î–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    """
    try:
        logger.info(f"üìã –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
        tag_list = tags.split(",") if tags else None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = await document_service.list_documents(
            user=current_user,
            pagination=pagination,
            status=status,
            mime_type=mime_type,
            tags=tag_list,
            date_from=date_from,
            date_to=date_to
        )
        
        return documents
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}"
        )

@router.get("/{document_id}", response_model=DocumentInfo)
async def get_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    """
    try:
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        document = await document_service.get_document(
            document_id=document_id,
            user=current_user
        )
        
        if not document:
            raise HTTPException(
                status_code=404,
                detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return document
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/{document_id}/download")
async def download_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª
    """
    try:
        logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        file_path = await document_service.get_document_file_path(
            document_id=document_id,
            user=current_user
        )
        
        if not file_path or not os.path.exists(file_path):
            raise HTTPException(
                status_code=404,
                detail="–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        document_info = await document_service.get_document(
            document_id=document_id,
            user=current_user
        )
        
        filename = document_info.title if document_info.title else f"document_{document_id}"
        
        return FileResponse(
            path=file_path,
            filename=filename,
            media_type='application/octet-stream'
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/{document_id}/chunks")
async def get_document_chunks(
    document_id: str,
    current_user: User = Depends(get_current_user),
    pagination: PaginationParams = Depends()
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏
    - –¢–∞–±–ª–∏—á–Ω—ã–µ —á–∞–Ω–∫–∏
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    try:
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        chunks = await document_service.get_document_chunks(
            document_id=document_id,
            user=current_user,
            pagination=pagination
        )
        
        return {
            "document_id": document_id,
            "chunks": chunks,
            "total_chunks": len(chunks),
            "pagination": pagination
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: {str(e)}"
        )

@router.put("/{document_id}/metadata")
async def update_document_metadata(
    document_id: str,
    metadata: DocumentMetadata,
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫
    - –û–ø–∏—Å–∞–Ω–∏–µ
    - –¢–µ–≥–∏
    - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    """
    try:
        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        updated_document = await document_service.update_document_metadata(
            document_id=document_id,
            metadata=metadata,
            user=current_user
        )
        
        return updated_document
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

@router.delete("/{document_id}")
async def delete_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –£–¥–∞–ª—è–µ—Ç:
    - –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    - –ß–∞–Ω–∫–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        await document_service.delete_document(
            document_id=document_id,
            user=current_user
        )
        
        return {"message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

@router.post("/{document_id}/reprocess")
async def reprocess_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–Ω–æ–≤–æ:
    - –ü–∞—Ä—Å–∏–Ω–≥
    - OCR (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    - –ß–∞–Ω–∫–æ–≤–∞–Ω–∏–µ
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    """
    try:
        logger.info(f"üîÑ –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        task_id = await document_service.reprocess_document(
            document_id=document_id,
            user=current_user
        )
        
        return {
            "message": "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É",
            "task_id": task_id
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/{document_id}/status")
async def get_document_status(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ü—Ä–æ–≥—Ä–µ—Å—Å
    - –û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        status = await document_service.get_document_status(
            document_id=document_id,
            user=current_user
        )
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )

@router.get("/stats/summary")
async def get_documents_summary(
    current_user: User = Depends(get_current_user)
):
    """
    –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    - –ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    - –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    - –ü–æ —Ä–∞–∑–º–µ—Ä–∞–º
    """
    try:
        logger.info(f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        summary = await document_service.get_documents_summary(
            user=current_user
        )
        
        return summary
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.post("/batch/upload")
async def batch_upload_documents(
    files: List[UploadFile] = File(...),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    try:
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        results = []
        for file in files:
            try:
                result = await document_service.upload_document(
                    file=file,
                    title=file.filename,
                    user=current_user
                )
                results.append({
                    "filename": file.filename,
                    "status": "success",
                    "document_id": result.document_id
                })
            except Exception as e:
                results.append({
                    "filename": file.filename,
                    "status": "error",
                    "error": str(e)
                })
        
        return {
            "message": "–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "results": results,
            "total_files": len(files),
            "successful": len([r for r in results if r["status"] == "success"]),
            "failed": len([r for r in results if r["status"] == "error"])
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"
        )
