"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
import logging
import time

from ..schemas.search import (
    SearchRequest,
    SearchResponse,
    SearchResult,
    SearchFilters,
    SearchType
)
from ..schemas.common import PaginationParams
from ..services.search_service import SearchService
from ..middleware.auth import get_current_user
from ..schemas.auth import User
from ..settings import get_settings

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
search_service = SearchService()
settings = get_settings()

@router.post("/", response_model=SearchResponse)
async def search_documents(
    request: SearchRequest,
    current_user: User = Depends(get_current_user),
    pagination: PaginationParams = Depends()
):
    """
    –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
    - –ö–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è)
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –∏ ACL
    """
    try:
        start_time = time.time()
        
        logger.info(f"üîç –ü–æ–∏—Å–∫: '{request.query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_service.search(
            query=request.query,
            search_type=request.search_type,
            filters=request.filters,
            top_k=request.top_k,
            user=current_user,
            pagination=pagination
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        search_time = time.time() - start_time
        
        response = SearchResponse(
            query=request.query,
            search_type=request.search_type,
            results=results,
            total_results=len(results),
            search_time=search_time,
            filters_applied=request.filters,
            pagination=pagination
        )
        
        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {search_time:.3f}s, –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {str(e)}"
        )

@router.get("/suggest", response_model=List[str])
async def get_search_suggestions(
    query: str = Query(..., min_length=1, max_length=100),
    limit: int = Query(10, ge=1, le=50),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    try:
        logger.info(f"üí° –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è: '{query}'")
        
        suggestions = await search_service.get_suggestions(
            query=query,
            limit=limit,
            user=current_user
        )
        
        return suggestions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}"
        )

@router.get("/popular", response_model=List[Dict[str, Any]])
async def get_popular_searches(
    limit: int = Query(10, ge=1, le=100),
    period: str = Query("7d", regex="^(1d|7d|30d|90d)$"),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –ü–µ—Ä–∏–æ–¥—ã: 1d, 7d, 30d, 90d
    """
    try:
        logger.info(f"üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        popular_searches = await search_service.get_popular_searches(
            limit=limit,
            period=period,
            user=current_user
        )
        
        return popular_searches
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}"
        )

@router.get("/filters", response_model=Dict[str, Any])
async def get_available_filters(
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
    - –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    - –¢–µ–≥–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
        filters = await search_service.get_available_filters(
            user=current_user
        )
        
        return filters
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}"
        )

@router.post("/advanced", response_model=SearchResponse)
async def advanced_search(
    request: SearchRequest,
    current_user: User = Depends(get_current_user),
    pagination: PaginationParams = Depends()
):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ë—É–ª–µ–≤—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (AND, OR, NOT)
    - –§—Ä–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
    - –ü–æ–∏—Å–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏/–¥–∞—Ç–µ/—Ä–∞–∑–º–µ—Ä—É
    """
    try:
        start_time = time.time()
        
        logger.info(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: '{request.query}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        results = await search_service.advanced_search(
            query=request.query,
            filters=request.filters,
            top_k=request.top_k,
            user=current_user,
            pagination=pagination
        )
        
        search_time = time.time() - start_time
        
        response = SearchResponse(
            query=request.query,
            search_type=SearchType.ADVANCED,
            results=results,
            total_results=len(results),
            search_time=search_time,
            filters_applied=request.filters,
            pagination=pagination
        )
        
        logger.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {search_time:.3f}s")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}"
        )

@router.get("/stats", response_model=Dict[str, Any])
async def get_search_statistics(
    period: str = Query("7d", regex="^(1d|7d|30d|90d)$"),
    current_user: User = Depends(get_current_user)
):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤
    - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
    """
    try:
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        stats = await search_service.get_search_statistics(
            period=period,
            user=current_user
        )
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.post("/feedback")
async def submit_search_feedback(
    search_id: str,
    query: str,
    feedback_type: str = Query(..., regex="^(relevant|irrelevant|useful|not_useful)$"),
    rating: Optional[int] = Query(None, ge=1, le=5),
    comment: Optional[str] = Query(None, max_length=500),
    current_user: User = Depends(get_current_user)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
    
    –¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
    - relevant/irrelevant - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - useful/not_useful - –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        logger.info(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –ø–æ–∏—Å–∫—É {search_id}: {feedback_type}")
        
        await search_service.submit_search_feedback(
            search_id=search_id,
            query=query,
            feedback_type=feedback_type,
            rating=rating,
            comment=comment,
            user=current_user
        )
        
        return {"message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/export")
async def export_search_results(
    query: str = Query(..., min_length=1),
    format: str = Query("json", regex="^(json|csv|pdf)$"),
    search_type: SearchType = SearchType.SEMANTIC,
    top_k: int = Query(100, ge=1, le=1000),
    current_user: User = Depends(get_current_user)
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    
    –§–æ—Ä–º–∞—Ç—ã: JSON, CSV, PDF
    """
    try:
        logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ '{query}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_service.search(
            query=query,
            search_type=search_type,
            top_k=top_k,
            user=current_user
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        export_data = await search_service.export_results(
            results=results,
            format=format,
            query=query
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = {
            "json": "application/json",
            "csv": "text/csv",
            "pdf": "application/pdf"
        }[format]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"search_results_{query[:50]}_{int(time.time())}.{format}"
        
        return JSONResponse(
            content=export_data,
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "Content-Type": content_type
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
        )
