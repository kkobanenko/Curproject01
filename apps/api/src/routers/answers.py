"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é RAG
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
import logging
import time

from ..schemas.answers import (
    AnswerRequest,
    AnswerResponse,
    AnswerFeedback,
    Citation,
    RAGContext
)
from ..services.rag_service import RAGService
from ..middleware.auth import get_current_user
from ..schemas.auth import User
from ..settings import get_settings

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
rag_service = RAGService()
settings = get_settings()

@router.post("/generate", response_model=AnswerResponse)
async def generate_answer(
    request: AnswerRequest,
    current_user: User = Depends(get_current_user)
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RAG
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
    4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç
    """
    try:
        start_time = time.time()
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{request.question}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer = await rag_service.generate_answer(
            question=request.question,
            context=request.context,
            max_length=request.max_length,
            temperature=request.temperature,
            include_citations=request.include_citations,
            user=current_user
        )
        
        generation_time = time.time() - start_time
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {generation_time:.3f}s")
        
        return answer
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        )

@router.post("/chat", response_model=AnswerResponse)
async def chat_conversation(
    request: AnswerRequest,
    conversation_id: Optional[str] = Query(None),
    current_user: User = Depends(get_current_user)
):
    """
    –ß–∞—Ç-—Ä–µ–∂–∏–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
    """
    try:
        start_time = time.time()
        
        logger.info(f"üí¨ –ß–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ: '{request.question}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã
        answer = await rag_service.chat_conversation(
            question=request.question,
            conversation_id=conversation_id,
            context=request.context,
            max_length=request.max_length,
            temperature=request.temperature,
            include_citations=request.include_citations,
            user=current_user
        )
        
        chat_time = time.time() - start_time
        
        logger.info(f"‚úÖ –ß–∞—Ç-–æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {chat_time:.3f}s")
        
        return answer
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç-—Ä–µ–∂–∏–º–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç-—Ä–µ–∂–∏–º–∞: {str(e)}"
        )

@router.get("/conversations", response_model=List[Dict[str, Any]])
async def list_conversations(
    current_user: User = Depends(get_current_user),
    limit: int = Query(20, ge=1, le=100),
    offset: int = Query(0, ge=0)
):
    """
    –°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - ID –±–µ—Å–µ–¥—ã
    - –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    try:
        logger.info(f"üìã –°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.email}")
        
        conversations = await rag_service.list_conversations(
            user=current_user,
            limit=limit,
            offset=offset
        )
        
        return conversations
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥: {str(e)}"
        )

@router.get("/conversations/{conversation_id}", response_model=List[Dict[str, Any]])
async def get_conversation_history(
    conversation_id: str,
    current_user: User = Depends(get_current_user),
    limit: int = Query(50, ge=1, le=200)
):
    """
    –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û—Ç–≤–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ü–∏—Ç–∞—Ç—ã
    """
    try:
        logger.info(f"üìú –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã {conversation_id}")
        
        history = await rag_service.get_conversation_history(
            conversation_id=conversation_id,
            user=current_user,
            limit=limit
        )
        
        return history
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã: {str(e)}"
        )

@router.delete("/conversations/{conversation_id}")
async def delete_conversation(
    conversation_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã
    
    –£–¥–∞–ª—è–µ—Ç:
    - –ò—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã {conversation_id}")
        
        await rag_service.delete_conversation(
            conversation_id=conversation_id,
            user=current_user
        )
        
        return {"message": "–ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ—Å–µ–¥—ã: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ—Å–µ–¥—ã: {str(e)}"
        )

@router.post("/feedback")
async def submit_answer_feedback(
    feedback: AnswerFeedback,
    current_user: User = Depends(get_current_user)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç–≤–µ—Ç—É
    
    –¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
    - helpful/not_helpful - –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    - accurate/inaccurate - —Ç–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - complete/incomplete - –ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    - relevant/irrelevant - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    """
    try:
        logger.info(f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç—É {feedback.answer_id}: {feedback.feedback_type}")
        
        await rag_service.submit_answer_feedback(
            feedback=feedback,
            user=current_user
        )
        
        return {"message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )

@router.get("/citations/{citation_id}", response_model=Citation)
async def get_citation_details(
    citation_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏—Ç–∞—Ç–µ
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–∑–∏—Ü–∏—è)
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        logger.info(f"üìñ –î–µ—Ç–∞–ª–∏ —Ü–∏—Ç–∞—Ç—ã {citation_id}")
        
        citation = await rag_service.get_citation_details(
            citation_id=citation_id,
            user=current_user
        )
        
        if not citation:
            raise HTTPException(
                status_code=404,
                detail="–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        return citation
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ü–∏—Ç–∞—Ç—ã: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ü–∏—Ç–∞—Ç—ã: {str(e)}"
        )

@router.post("/rerank")
async def rerank_context(
    question: str = Query(..., min_length=1),
    context_ids: List[str] = Query(...),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç reranker –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å—É
    """
    try:
        logger.info(f"üîÑ –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: '{question}'")
        
        reranked_context = await rag_service.rerank_context(
            question=question,
            context_ids=context_ids,
            user=current_user
        )
        
        return {
            "question": question,
            "reranked_context": reranked_context,
            "total_contexts": len(reranked_context)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

@router.get("/context/{context_id}", response_model=RAGContext)
async def get_context_details(
    context_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    - –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        logger.info(f"üìö –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {context_id}")
        
        context = await rag_service.get_context_details(
            context_id=context_id,
            user=current_user
        )
        
        if not context:
            raise HTTPException(
                status_code=404,
                detail="–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return context
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}"
        )

@router.get("/stats/answers", response_model=Dict[str, Any])
async def get_answers_statistics(
    period: str = Query("7d", regex="^(1d|7d|30d|90d)$"),
    current_user: User = Depends(get_current_user)
):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç–∞–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    - –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
    """
    try:
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        stats = await rag_service.get_answers_statistics(
            period=period,
            user=current_user
        )
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

@router.post("/export/conversation")
async def export_conversation(
    conversation_id: str,
    format: str = Query("json", regex="^(json|csv|pdf|txt)$"),
    current_user: User = Depends(get_current_user)
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –±–µ—Å–µ–¥—ã
    
    –§–æ—Ä–º–∞—Ç—ã: JSON, CSV, PDF, TXT
    """
    try:
        logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–µ—Å–µ–¥—ã {conversation_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã
        history = await rag_service.get_conversation_history(
            conversation_id=conversation_id,
            user=current_user,
            limit=1000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        export_data = await rag_service.export_conversation(
            history=history,
            format=format,
            conversation_id=conversation_id
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = {
            "json": "application/json",
            "csv": "text/csv",
            "pdf": "application/pdf",
            "txt": "text/plain"
        }[format]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"conversation_{conversation_id}_{int(time.time())}.{format}"
        
        return JSONResponse(
            content=export_data,
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "Content-Type": content_type
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–µ—Å–µ–¥—ã: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–µ—Å–µ–¥—ã: {str(e)}"
        )
