"""
–°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any, List
from enum import Enum
from pydantic import BaseModel

from ..schemas.auth import UserContext
from ..settings import get_settings

logger = logging.getLogger(__name__)
settings = get_settings()


class AuditAction(str, Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞—É–¥–∏—Ç–∞"""
    LOGIN = "login"
    LOGOUT = "logout"
    DOCUMENT_UPLOAD = "document_upload"
    DOCUMENT_VIEW = "document_view"
    DOCUMENT_DOWNLOAD = "document_download"
    DOCUMENT_DELETE = "document_delete"
    SEARCH_QUERY = "search_query"
    RAG_QUERY = "rag_query"
    USER_CREATE = "user_create"
    USER_UPDATE = "user_update"
    USER_DELETE = "user_delete"
    ROLE_CHANGE = "role_change"
    PERMISSION_GRANT = "permission_grant"
    PERMISSION_REVOKE = "permission_revoke"
    FAILED_LOGIN = "failed_login"
    UNAUTHORIZED_ACCESS = "unauthorized_access"
    SECURITY_VIOLATION = "security_violation"


class AuditLevel(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–∞"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    SECURITY = "security"


class AuditEntry(BaseModel):
    """–ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞"""
    id: Optional[int] = None
    timestamp: datetime
    user_id: Optional[int]
    username: Optional[str]
    tenant_id: Optional[int]
    action: AuditAction
    level: AuditLevel
    resource_type: Optional[str] = None
    resource_id: Optional[str] = None
    details: Dict[str, Any] = {}
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None
    session_id: Optional[str] = None
    success: bool = True
    error_message: Optional[str] = None


class AuditService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    def log_action(
        action: AuditAction,
        level: AuditLevel = AuditLevel.INFO,
        user_context: Optional[UserContext] = None,
        resource_type: Optional[str] = None,
        resource_id: Optional[str] = None,
        details: Optional[Dict[str, Any]] = None,
        ip_address: Optional[str] = None,
        user_agent: Optional[str] = None,
        session_id: Optional[str] = None,
        success: bool = True,
        error_message: Optional[str] = None
    ) -> AuditEntry:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            resource_type: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            resource_id: ID —Ä–µ—Å—É—Ä—Å–∞
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            ip_address: IP –∞–¥—Ä–µ—Å
            user_agent: User-Agent
            session_id: ID —Å–µ—Å—Å–∏–∏
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
        """
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
        audit_entry = AuditEntry(
            timestamp=datetime.utcnow(),
            user_id=user_context.user_id if user_context else None,
            username=user_context.username if user_context else None,
            tenant_id=user_context.tenant_id if user_context else None,
            action=action,
            level=level,
            resource_type=resource_type,
            resource_id=resource_id,
            details=details or {},
            ip_address=ip_address,
            user_agent=user_agent,
            session_id=session_id,
            success=success,
            error_message=error_message
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        log_message = AuditService._format_log_message(audit_entry)
        
        if level == AuditLevel.CRITICAL or level == AuditLevel.SECURITY:
            logger.critical(log_message)
        elif level == AuditLevel.WARNING:
            logger.warning(log_message)
        else:
            logger.info(log_message)
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        # AuditService._save_to_database(audit_entry)
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if level in [AuditLevel.CRITICAL, AuditLevel.SECURITY]:
            AuditService._send_security_alert(audit_entry)
        
        return audit_entry
    
    @staticmethod
    def _format_log_message(entry: AuditEntry) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∞"""
        user_info = f"User: {entry.username}({entry.user_id})" if entry.username else "Anonymous"
        tenant_info = f"Tenant: {entry.tenant_id}" if entry.tenant_id else ""
        resource_info = f"Resource: {entry.resource_type}:{entry.resource_id}" if entry.resource_type else ""
        status = "SUCCESS" if entry.success else "FAILED"
        
        parts = [
            f"[{entry.level.upper()}]",
            f"Action: {entry.action}",
            user_info,
            tenant_info,
            resource_info,
            f"Status: {status}",
            f"IP: {entry.ip_address}" if entry.ip_address else "",
            f"Session: {entry.session_id}" if entry.session_id else ""
        ]
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
        parts = [part for part in parts if part]
        
        message = " | ".join(parts)
        
        if entry.error_message:
            message += f" | Error: {entry.error_message}"
        
        if entry.details:
            message += f" | Details: {json.dumps(entry.details, ensure_ascii=False)}"
        
        return message
    
    @staticmethod
    def _send_security_alert(entry: AuditEntry):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.critical(f"üö® SECURITY ALERT: {entry.action} - {entry.error_message}")
        
        # –ü—Ä–∏–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
        # - Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        # - Slack/Teams —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # - Push –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus/Grafana)
        # - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏
    
    @staticmethod
    def log_login_success(user_context: UserContext, ip_address: str, user_agent: str, session_id: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        AuditService.log_action(
            action=AuditAction.LOGIN,
            level=AuditLevel.INFO,
            user_context=user_context,
            ip_address=ip_address,
            user_agent=user_agent,
            session_id=session_id,
            details={"login_time": datetime.utcnow().isoformat()}
        )
    
    @staticmethod
    def log_login_failure(username: str, ip_address: str, user_agent: str, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        AuditService.log_action(
            action=AuditAction.FAILED_LOGIN,
            level=AuditLevel.WARNING,
            ip_address=ip_address,
            user_agent=user_agent,
            success=False,
            error_message=reason,
            details={"attempted_username": username}
        )
    
    @staticmethod
    def log_document_access(user_context: UserContext, document_id: str, action: AuditAction, 
                          ip_address: str, success: bool = True, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        level = AuditLevel.INFO if success else AuditLevel.WARNING
        
        AuditService.log_action(
            action=action,
            level=level,
            user_context=user_context,
            resource_type="document",
            resource_id=document_id,
            ip_address=ip_address,
            success=success,
            error_message=error
        )
    
    @staticmethod
    def log_search_query(user_context: UserContext, query: str, results_count: int, 
                        ip_address: str, response_time_ms: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        AuditService.log_action(
            action=AuditAction.SEARCH_QUERY,
            level=AuditLevel.INFO,
            user_context=user_context,
            ip_address=ip_address,
            details={
                "query": query,
                "results_count": results_count,
                "response_time_ms": response_time_ms
            }
        )
    
    @staticmethod
    def log_rag_query(user_context: UserContext, question: str, answer_length: int,
                     sources_count: int, ip_address: str, response_time_ms: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞"""
        AuditService.log_action(
            action=AuditAction.RAG_QUERY,
            level=AuditLevel.INFO,
            user_context=user_context,
            ip_address=ip_address,
            details={
                "question": question,
                "answer_length": answer_length,
                "sources_count": sources_count,
                "response_time_ms": response_time_ms
            }
        )
    
    @staticmethod
    def log_unauthorized_access(attempted_action: str, resource: str, user_context: Optional[UserContext],
                              ip_address: str, user_agent: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        AuditService.log_action(
            action=AuditAction.UNAUTHORIZED_ACCESS,
            level=AuditLevel.SECURITY,
            user_context=user_context,
            resource_type=resource,
            ip_address=ip_address,
            user_agent=user_agent,
            success=False,
            error_message=f"Unauthorized attempt to {attempted_action}",
            details={"attempted_action": attempted_action}
        )
    
    @staticmethod
    def log_permission_change(admin_context: UserContext, target_user_id: int, 
                            old_permissions: List[str], new_permissions: List[str], ip_address: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        AuditService.log_action(
            action=AuditAction.PERMISSION_GRANT if len(new_permissions) > len(old_permissions) else AuditAction.PERMISSION_REVOKE,
            level=AuditLevel.CRITICAL,
            user_context=admin_context,
            resource_type="user",
            resource_id=str(target_user_id),
            ip_address=ip_address,
            details={
                "old_permissions": old_permissions,
                "new_permissions": new_permissions,
                "changed_by_admin": admin_context.username
            }
        )


class AuditFilter:
    """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∞—É–¥–∏—Ç–µ"""
    
    def __init__(
        self,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        user_id: Optional[int] = None,
        tenant_id: Optional[int] = None,
        actions: Optional[List[AuditAction]] = None,
        levels: Optional[List[AuditLevel]] = None,
        resource_type: Optional[str] = None,
        ip_address: Optional[str] = None,
        success_only: Optional[bool] = None
    ):
        self.start_date = start_date
        self.end_date = end_date
        self.user_id = user_id
        self.tenant_id = tenant_id
        self.actions = actions
        self.levels = levels
        self.resource_type = resource_type
        self.ip_address = ip_address
        self.success_only = success_only


# Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
class AuditMiddleware:
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @staticmethod
    def get_client_ip(request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º–æ–π IP
        return request.client.host if request.client else "unknown"
    
    @staticmethod
    def get_user_agent(request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User-Agent"""
        return request.headers.get("User-Agent", "unknown")
