"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import requests
import json
from typing import Dict, Any

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8080/api/v1"


class RAGAuthClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ RAG Platform"""
    
    def __init__(self, base_url: str = BASE_URL):
        self.base_url = base_url
        self.access_token = None
        self.refresh_token = None
        self.session = requests.Session()
    
    def login(self, username: str, password: str) -> Dict[str, Any]:
        """
        –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            
        Returns:
            –û—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        """
        url = f"{self.base_url}/auth/login"
        data = {
            "username": username,
            "password": password
        }
        
        response = self.session.post(url, json=data)
        response.raise_for_status()
        
        result = response.json()
        self.access_token = result["access_token"]
        self.refresh_token = result["refresh_token"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session.headers.update({
            "Authorization": f"Bearer {self.access_token}"
        })
        
        return result
    
    def refresh_access_token(self) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
        
        Returns:
            –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        """
        if not self.refresh_token:
            raise ValueError("Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.")
        
        url = f"{self.base_url}/auth/refresh"
        data = {
            "refresh_token": self.refresh_token
        }
        
        response = self.session.post(url, json=data)
        response.raise_for_status()
        
        result = response.json()
        self.access_token = result["access_token"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.session.headers.update({
            "Authorization": f"Bearer {self.access_token}"
        })
        
        return result
    
    def get_current_user(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        url = f"{self.base_url}/auth/me"
        response = self.session.get(url)
        response.raise_for_status()
        
        return response.json()
    
    def get_users(self, page: int = 1, size: int = 20) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        
        Args:
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        url = f"{self.base_url}/auth/users"
        params = {
            "page": page,
            "size": size
        }
        
        response = self.session.get(url, params=params)
        response.raise_for_status()
        
        return response.json()
    
    def get_user(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        url = f"{self.base_url}/auth/users/{user_id}"
        response = self.session.get(url)
        response.raise_for_status()
        
        return response.json()
    
    def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        url = f"{self.base_url}/auth/users"
        response = self.session.post(url, json=user_data)
        response.raise_for_status()
        
        return response.json()
    
    def update_user(self, user_id: int, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        url = f"{self.base_url}/auth/users/{user_id}"
        response = self.session.put(url, json=user_data)
        response.raise_for_status()
        
        return response.json()
    
    def get_roles(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        """
        url = f"{self.base_url}/auth/roles"
        response = self.session.get(url)
        response.raise_for_status()
        
        return response.json()
    
    def get_tenants(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–∞–Ω—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–µ–Ω–∞–Ω—Ç–æ–≤
        """
        url = f"{self.base_url}/auth/tenants"
        response = self.session.get(url)
        response.raise_for_status()
        
        return response.json()
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤)"""
        self.access_token = None
        self.refresh_token = None
        self.session.headers.pop("Authorization", None)


def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    print("üîê –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ RAG Platform\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = RAGAuthClient()
    
    try:
        # 1. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        print("1Ô∏è‚É£ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...")
        login_result = client.login("admin", "admin123")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {login_result['token_type']} —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        print(f"‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {login_result['expires_in']} —Å–µ–∫—É–Ω–¥\n")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_info = client.get_current_user()
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']}")
        print(f"üè¢ –¢–µ–Ω–∞–Ω—Ç: {user_info['tenant_id']}")
        print(f"üîë –†–æ–ª—å: {user_info['role_id']}\n")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = client.get_users(page=1, size=10)
        print(f"üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users['total']}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {users['page']} –∏–∑ {users['pages']}")
        for user in users['items']:
            print(f"   - {user['username']} ({user['email']})")
        print()
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        print("4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π...")
        roles = client.get_roles()
        for role in roles:
            print(f"   - {role['name']}: {', '.join(role['permissions'])}")
        print()
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–Ω–∞–Ω—Ç–æ–≤
        print("5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–∞–Ω—Ç–æ–≤...")
        tenants = client.get_tenants()
        for tenant in tenants:
            print(f"   - {tenant['name']} ({tenant['domain']})")
        print()
        
        # 6. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        print("6Ô∏è‚É£ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        client.logout()
        print("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def example_user_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    print("üë• –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n")
    
    client = RAGAuthClient()
    
    try:
        # –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        client.login("admin", "admin123")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        new_user = client.create_user({
            "username": "test_user",
            "email": "test@example.com",
            "password": "secure_password_123",
            "tenant_id": 1,
            "role_id": 2
        })
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {new_user['username']} (ID: {new_user['id']})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_info = client.get_user(new_user['id'])
        print(f"üë§ {user_info['username']} - {user_info['email']}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        updated_user = client.update_user(new_user['id'], {
            "email": "updated@example.com"
        })
        print(f"‚úÖ Email –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_user['email']}")
        
        # –í—ã—Ö–æ–¥
        client.logout()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def example_rate_limiting():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å rate limiting"""
    
    print("‚è±Ô∏è –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å rate limiting\n")
    
    client = RAGAuthClient()
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ rate limiting
        print("–ü–æ–ø—ã—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ rate limiting...")
        
        for i in range(15):
            try:
                response = client.session.post(f"{BASE_URL}/auth/login", json={
                    "username": "admin",
                    "password": "admin123"
                })
                
                if response.status_code == 429:
                    print(f"üö´ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}")
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
                    break
                else:
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {e}")
                break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä
    example_usage()
    
    print("\n" + "="*50 + "\n")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    example_user_management()
    
    print("\n" + "="*50 + "\n")
    
    # Rate limiting
    example_rate_limiting()
    
    print("\n‚ú® –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
