#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ RAG Platform API
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç—á–µ—Ç—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TEST_TYPE="all"
COVERAGE=true
HTML_REPORT=false
PARALLEL=false
VERBOSE=false
MARKERS=""
CLEAN=false

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ RAG Platform API

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    ./run_tests.sh [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    -t, --type TYPE        –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: unit|integration|e2e|load|all (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all)
    -c, --coverage         –í–∫–ª—é—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–∫–ª—é—á–µ–Ω–æ)
    -h, --html            –°–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    -p, --parallel        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    -v, --verbose         –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -m, --markers MARKERS  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã pytest
    --clean               –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à pytest –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    --help                –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    ./run_tests.sh                              # –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    ./run_tests.sh -t unit -v                   # Unit —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    ./run_tests.sh -t integration -p            # Integration —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    ./run_tests.sh -t load --clean              # –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
    ./run_tests.sh -h -p                       # –í—Å–µ —Ç–µ—Å—Ç—ã —Å HTML –æ—Ç—á–µ—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    ./run_tests.sh -m "not slow"               # –í—Å–µ —Ç–µ—Å—Ç—ã –∫—Ä–æ–º–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö

–ú–ê–†–ö–ï–†–´ –¢–ï–°–¢–û–í:
    unit          - Unit —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    integration   - Integration —Ç–µ—Å—Ç—ã (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
    e2e           - End-to-end —Ç–µ—Å—Ç—ã (–ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏)
    load          - –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    slow          - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (>1 —Å–µ–∫—É–Ω–¥—ã)
    database      - –¢–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ë–î
    redis         - –¢–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ Redis
    external      - –¢–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            TEST_TYPE="$2"
            shift 2
            ;;
        -c|--coverage)
            COVERAGE=true
            shift
            ;;
        -h|--html)
            HTML_REPORT=true
            shift
            ;;
        -p|--parallel)
            PARALLEL=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -m|--markers)
            MARKERS="$2"
            shift 2
            ;;
        --clean)
            CLEAN=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v python3 &> /dev/null; then
        error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    if ! python3 -c "import pytest" &> /dev/null; then
        error "pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt"
        exit 1
    fi
    
    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
clean_cache() {
    if [[ "$CLEAN" == true ]]; then
        log "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ pytest..."
        rm -rf .pytest_cache/
        rm -rf __pycache__/
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        success "–ö—ç—à –æ—á–∏—â–µ–Ω"
    fi
}

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã pytest
build_pytest_command() {
    local cmd="python3 -m pytest"
    
    # –¢–∏–ø —Ç–µ—Å—Ç–æ–≤
    case $TEST_TYPE in
        unit)
            cmd="$cmd -m unit"
            ;;
        integration)
            cmd="$cmd -m integration"
            ;;
        e2e)
            cmd="$cmd -m e2e"
            ;;
        load)
            cmd="$cmd -m load"
            ;;
        all)
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE"
            exit 1
            ;;
    esac
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    if [[ -n "$MARKERS" ]]; then
        if [[ "$cmd" == *"-m "* ]]; then
            cmd="$cmd and $MARKERS"
        else
            cmd="$cmd -m \"$MARKERS\""
        fi
    fi
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if [[ "$COVERAGE" == true ]]; then
        cmd="$cmd --cov=src --cov-report=term-missing"
        
        if [[ "$HTML_REPORT" == true ]]; then
            cmd="$cmd --cov-report=html:htmlcov"
        fi
        
        cmd="$cmd --cov-report=xml:coverage.xml"
    fi
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if [[ "$PARALLEL" == true ]]; then
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU
        if command -v nproc &> /dev/null; then
            local cpu_count=$(nproc)
        else
            local cpu_count=4  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fi
        cmd="$cmd -n $cpu_count"
    fi
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    if [[ "$VERBOSE" == true ]]; then
        cmd="$cmd -v"
    else
        cmd="$cmd --tb=short"
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    cmd="$cmd --strict-markers --strict-config"
    
    echo "$cmd"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local pytest_cmd=$(build_pytest_command)
    
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    log "–ö–æ–º–∞–Ω–¥–∞: $pytest_cmd"
    log "–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE"
    
    if [[ "$COVERAGE" == true ]]; then
        log "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: –≤–∫–ª—é—á–µ–Ω–æ"
    fi
    
    if [[ "$PARALLEL" == true ]]; then
        log "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ"
    fi
    
    echo ""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if eval $pytest_cmd; then
        success "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è
        if [[ "$COVERAGE" == true ]] && [[ -f "coverage.xml" ]]; then
            log "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞..."
            python3 -c "
import xml.etree.ElementTree as ET
try:
    tree = ET.parse('coverage.xml')
    root = tree.getroot()
    line_rate = float(root.attrib.get('line-rate', 0)) * 100
    branch_rate = float(root.attrib.get('branch-rate', 0)) * 100
    print(f'üìä –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {line_rate:.1f}%')
    print(f'üåø –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–π: {branch_rate:.1f}%')
    
    if line_rate >= 80:
        print('‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (‚â•80%)')
    else:
        print(f'‚ö†Ô∏è  –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è (80%)')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: {e}')
"
        fi
        
        # HTML –æ—Ç—á–µ—Ç
        if [[ "$HTML_REPORT" == true ]] && [[ -d "htmlcov" ]]; then
            success "HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: htmlcov/index.html"
        fi
        
        return 0
    else
        error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        return 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    if [[ "$COVERAGE" == true ]]; then
        log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
        
        cat << EOF

================================================================================
üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò
================================================================================

üìÖ –î–∞—Ç–∞: $(date +'%Y-%m-%d %H:%M:%S')
üîß –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE
üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: $([ "$COVERAGE" == true ] && echo "–≤–∫–ª—é—á–µ–Ω–æ" || echo "–æ—Ç–∫–ª—é—á–µ–Ω–æ")
‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: $([ "$PARALLEL" == true ] && echo "–≤–∫–ª—é—á–µ–Ω–æ" || echo "–æ—Ç–∫–ª—é—á–µ–Ω–æ")

EOF

        if [[ -f "coverage.xml" ]]; then
            python3 -c "
import xml.etree.ElementTree as ET
import sys

try:
    tree = ET.parse('coverage.xml')
    root = tree.getroot()
    
    line_rate = float(root.attrib.get('line-rate', 0)) * 100
    branch_rate = float(root.attrib.get('branch-rate', 0)) * 100
    
    print('üìà –ü–û–ö–†–´–¢–ò–ï –ö–û–î–ê:')
    print(f'   ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {line_rate:.1f}%')
    print(f'   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–π: {branch_rate:.1f}%')
    print()
    
    # –°—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞
    if line_rate >= 90:
        print('üèÜ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞!')
    elif line_rate >= 80:
        print('‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞')
    elif line_rate >= 70:
        print('‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞')
    else:
        print('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è')
        
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}')
    sys.exit(1)
"
        fi
        
        echo ""
        echo "================================================================================"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo ""
    log "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RAG Platform API"
    echo ""
    
    check_dependencies
    clean_cache
    
    if run_tests; then
        generate_report
        success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ"
        exit 0
    else
        error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"
