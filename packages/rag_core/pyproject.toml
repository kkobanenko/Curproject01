[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-core"
version = "0.1.0"
description = "Core RAG functionality for document processing, embeddings, and vector search"
authors = [
    {name = "RAG Platform Team", email = "team@rag-platform.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "psycopg[binary]>=3.1.0",
    "requests>=2.31.0",
    "asyncio-mqtt>=0.16.0",
    "PyPDF2>=3.0.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "camelot-py[cv]>=0.11.0",
    "tabula-py>=2.8.0",
    "pytesseract>=0.3.10",
    "Pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "python-magic>=0.4.27",
    "chardet>=5.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

[project.urls]
Homepage = "https://github.com/your-org/rag-platform"
Repository = "https://github.com/your-org/rag-platform"
Documentation = "https://rag-platform.readthedocs.io"
Issues = "https://github.com/your-org/rag-platform/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["rag_core*"]

[tool.setuptools.package-data]
rag_core = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "camelot.*",
    "tabula.*",
    "pytesseract.*",
    "cv2.*",
]
ignore_missing_imports = true
