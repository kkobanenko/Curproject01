version: '3.8'

services:
  # PostgreSQL с оптимизацией для продакшн
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rag-platform-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      # Продакшн оптимизации
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'pg_stat_statements'
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-4MB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - postgres_logs_prod:/var/log/postgresql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis с кластеризацией
  redis:
    image: redis:7-alpine
    container_name: rag-platform-redis-prod
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data_prod:/data
      - redis_logs_prod:/var/log/redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ClickHouse для метрик
  clickhouse:
    image: clickhouse/clickhouse-server:23
    container_name: rag-platform-clickhouse-prod
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-metrics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data_prod:/var/lib/clickhouse
      - clickhouse_logs_prod:/var/log/clickhouse-server
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9000}:9000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Ollama с GPU поддержкой
  ollama:
    image: ollama/ollama:latest
    container_name: rag-platform-ollama-prod
    volumes:
      - ollama_data_prod:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-4}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # API с автомасштабированием
  api:
    image: ${API_IMAGE:-ghcr.io/user/rag-platform-api:latest}
    container_name: rag-platform-api-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-rag_platform}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # ClickHouse  
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-metrics}
      
      # Ollama
      OLLAMA_BASE_URL: http://ollama:11434
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Performance
      WORKERS: ${API_WORKERS:-4}
      MAX_CONNECTIONS: ${API_MAX_CONNECTIONS:-100}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Features
      ENABLE_ANALYTICS: "true"
      ENABLE_CACHE: "true"
      ENABLE_RATE_LIMITING: "true"
    volumes:
      - api_logs_prod:/app/logs
      - documents_data_prod:/app/data/documents
    ports:
      - "${API_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Streamlit Frontend
  streamlit:
    image: ${STREAMLIT_IMAGE:-ghcr.io/user/rag-platform-streamlit:latest}
    container_name: rag-platform-streamlit-prod
    environment:
      API_BASE_URL: http://api:8081
      STREAMLIT_SERVER_PORT: 8502
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
      STREAMLIT_SERVER_ENABLE_CORS: true
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: false
      STREAMLIT_THEME_PRIMARY_COLOR: "#1f77b4"
      STREAMLIT_SERVER_MAX_UPLOAD_SIZE: ${STREAMLIT_MAX_UPLOAD_SIZE:-500}
    volumes:
      - streamlit_logs_prod:/app/logs
    ports:
      - "${STREAMLIT_PORT:-8502}:8502"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8502/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: ${STREAMLIT_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: rag-platform-nginx-prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - streamlit
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Superset для дашбордов
  superset:
    image: apache/superset:3.0.0
    container_name: rag-platform-superset-prod
    environment:
      - SUPERSET_DATABASE_URI=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${SUPERSET_DB:-superset}
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - SUPERSET_FEATURE_FLAGS='{"DASHBOARD_NATIVE_FILTERS": true, "ENABLE_TEMPLATE_PROCESSING": true}'
      - SUPERSET_LOAD_EXAMPLES=false
      - SUPERSET_WEBSERVER_TIMEOUT=${SUPERSET_TIMEOUT:-300}
    volumes:
      - superset_data_prod:/app/superset_home
      - superset_logs_prod:/app/logs
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py
    ports:
      - "${SUPERSET_PORT:-8090}:8088"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-platform-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data_prod:/prometheus
      - prometheus_logs_prod:/var/log/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: rag-platform-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=${GRAFANA_DB:-grafana}
      - GF_DATABASE_USER=${POSTGRES_USER:-postgres}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - grafana_logs_prod:/var/log/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: rag-platform-node-exporter-prod
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

networks:
  default:
    driver: bridge

volumes:
  postgres_data_prod:
    driver: local
  postgres_logs_prod:
    driver: local
  redis_data_prod:
    driver: local
  redis_logs_prod:
    driver: local
  clickhouse_data_prod:
    driver: local
  clickhouse_logs_prod:
    driver: local
  ollama_data_prod:
    driver: local
  api_logs_prod:
    driver: local
  streamlit_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  superset_data_prod:
    driver: local
  superset_logs_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  prometheus_logs_prod:
    driver: local
  grafana_data_prod:
    driver: local
  grafana_logs_prod:
    driver: local
  documents_data_prod:
    driver: local
