name: 🚀 Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Images
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component:
          - name: api
            context: ./apps/api
            dockerfile: ./apps/api/Dockerfile
          - name: streamlit
            context: ./apps/streamlit_app
            dockerfile: ./apps/streamlit_app/Dockerfile
          - name: superset
            context: ./infra/superset
            dockerfile: ./infra/superset/Dockerfile
          - name: airflow
            context: ./pipelines/airflow
            dockerfile: ./pipelines/airflow/Dockerfile
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=RAG Platform ${{ matrix.component.name }}
          org.opencontainers.image.description=RAG Platform ${{ matrix.component.name }} service
          org.opencontainers.image.vendor=RAG Platform Team
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🚀 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component.context }}
        file: ${{ matrix.component.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    
    - name: 🔐 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: ${{ matrix.component.name }}-sbom.spdx.json
    
    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: '${{ matrix.component.name }}-trivy-results.sarif'
    
    - name: 📊 Upload vulnerability scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '${{ matrix.component.name }}-trivy-results.sarif'
    
    - name: 📦 Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.component.name }}-artifacts
        path: |
          ${{ matrix.component.name }}-sbom.spdx.json
          ${{ matrix.component.name }}-trivy-results.sarif

  # Job 2: Security Scanning
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: build-images
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Snyk to check for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
        args: --severity-threshold=high
      continue-on-error: true
    
    - name: 📊 Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # Job 3: Deploy to Staging
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    timeout-minutes: 20
    environment:
      name: staging
      url: https://staging.rag-platform.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: 🔑 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: 🏗️ Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: 🔗 Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name rag-platform-staging
    
    - name: 🗂️ Prepare Helm values
      run: |
        cat > staging-values.yaml << EOF
        global:
          environment: staging
          imageTag: ${{ github.sha }}
          domain: staging.rag-platform.com
        
        api:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          replicas: 2
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
        
        streamlit:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/streamlit:${{ github.sha }}
          replicas: 2
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
        
        superset:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/superset:${{ github.sha }}
          replicas: 1
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
        
        airflow:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:${{ github.sha }}
          replicas: 1
        
        postgresql:
          enabled: true
          persistence:
            size: 100Gi
        
        redis:
          enabled: true
          cluster:
            enabled: false
        
        clickhouse:
          enabled: true
          persistence:
            size: 50Gi
        
        ingress:
          enabled: true
          className: nginx
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
          tls:
            - secretName: rag-platform-staging-tls
              hosts:
                - staging.rag-platform.com
        EOF
    
    - name: 🚀 Deploy to staging
      run: |
        helm upgrade --install rag-platform-staging ./infra/helm/rag-platform \
          --namespace rag-platform-staging \
          --create-namespace \
          --values staging-values.yaml \
          --timeout 10m \
          --wait
    
    - name: ✅ Verify deployment
      run: |
        kubectl rollout status deployment/api -n rag-platform-staging --timeout=300s
        kubectl rollout status deployment/streamlit -n rag-platform-staging --timeout=300s
        
        # Health check
        kubectl run health-check --rm -i --image=curlimages/curl:latest --restart=Never -- \
          curl -f http://api.rag-platform-staging.svc.cluster.local:8081/health || exit 1
    
    - name: 📊 Post deployment summary
      run: |
        echo "## 🎭 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://staging.rag-platform.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Job 4: Run Smoke Tests
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install dependencies
      run: |
        pip install requests pytest playwright
        playwright install chromium
    
    - name: 💨 Run smoke tests
      env:
        STAGING_URL: https://staging.rag-platform.com
      run: |
        cd apps/api
        python -c "
import requests
import time

def test_api_health():
    url = '${{ env.STAGING_URL }}/api/v1/health'
    for attempt in range(5):
        try:
            response = requests.get(url, timeout=10)
            assert response.status_code == 200
            print(f'✅ API health check passed: {response.json()}')
            return
        except Exception as e:
            print(f'❌ Attempt {attempt + 1}: {e}')
            time.sleep(10)
    raise Exception('API health check failed after 5 attempts')

def test_streamlit_health():
    url = '${{ env.STAGING_URL }}'
    response = requests.get(url, timeout=10)
    assert response.status_code == 200
    print('✅ Streamlit health check passed')

test_api_health()
test_streamlit_health()
print('🎉 All smoke tests passed!')
"

  # Job 5: Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, smoke-tests]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    timeout-minutes: 30
    environment:
      name: production
      url: https://rag-platform.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: 🔑 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: 🏗️ Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: 🔗 Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name rag-platform-production
    
    - name: 🗂️ Prepare Helm values for production
      run: |
        cat > production-values.yaml << EOF
        global:
          environment: production
          imageTag: ${{ github.sha }}
          domain: rag-platform.com
        
        api:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          replicas: 3
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 4Gi
          autoscaling:
            enabled: true
            minReplicas: 3
            maxReplicas: 10
            targetCPUUtilizationPercentage: 70
        
        streamlit:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/streamlit:${{ github.sha }}
          replicas: 3
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          autoscaling:
            enabled: true
            minReplicas: 3
            maxReplicas: 8
            targetCPUUtilizationPercentage: 70
        
        superset:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/superset:${{ github.sha }}
          replicas: 2
          resources:
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: 2000m
              memory: 4Gi
        
        airflow:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:${{ github.sha }}
          replicas: 2
        
        postgresql:
          enabled: true
          primary:
            persistence:
              size: 500Gi
              storageClass: gp3
          readReplicas:
            replicaCount: 2
        
        redis:
          enabled: true
          cluster:
            enabled: true
            nodes: 6
        
        clickhouse:
          enabled: true
          shards: 3
          replicas: 2
          persistence:
            size: 1Ti
            storageClass: gp3
        
        monitoring:
          prometheus:
            enabled: true
          grafana:
            enabled: true
          alertmanager:
            enabled: true
        
        ingress:
          enabled: true
          className: nginx
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/rate-limit: "100"
            nginx.ingress.kubernetes.io/rate-limit-window: "1m"
          tls:
            - secretName: rag-platform-prod-tls
              hosts:
                - rag-platform.com
        EOF
    
    - name: 🎯 Blue-Green Deployment Strategy
      run: |
        # Create blue-green deployment
        helm upgrade --install rag-platform-green ./infra/helm/rag-platform \
          --namespace rag-platform-production \
          --create-namespace \
          --values production-values.yaml \
          --set nameOverride="green" \
          --timeout 15m \
          --wait
        
        # Verify green deployment
        kubectl rollout status deployment/api-green -n rag-platform-production --timeout=600s
        kubectl rollout status deployment/streamlit-green -n rag-platform-production --timeout=600s
        
        # Health check on green deployment
        kubectl run health-check-green --rm -i --image=curlimages/curl:latest --restart=Never -- \
          curl -f http://api-green.rag-platform-production.svc.cluster.local:8081/health
        
        # Switch traffic to green deployment
        kubectl patch service api -n rag-platform-production -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service streamlit -n rag-platform-production -p '{"spec":{"selector":{"version":"green"}}}'
        
        echo "✅ Traffic switched to green deployment"
        
        # Wait and then remove blue deployment
        sleep 300  # 5 minutes grace period
        
        if helm list -n rag-platform-production | grep -q "rag-platform-blue"; then
          helm uninstall rag-platform-blue -n rag-platform-production || true
        fi
        
        # Rename green to blue for next deployment
        helm upgrade rag-platform-blue ./infra/helm/rag-platform \
          --namespace rag-platform-production \
          --values production-values.yaml \
          --set nameOverride="blue" \
          --timeout 15m \
          --reuse-values
    
    - name: 📊 Post production deployment summary
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy**: Blue-Green Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://rag-platform.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Resource Allocation" >> $GITHUB_STEP_SUMMARY
        echo "- **API**: 3-10 replicas (auto-scaling)" >> $GITHUB_STEP_SUMMARY
        echo "- **Streamlit**: 3-8 replicas (auto-scaling)" >> $GITHUB_STEP_SUMMARY
        echo "- **Superset**: 2 replicas" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: Primary + 2 read replicas" >> $GITHUB_STEP_SUMMARY
        echo "- **Redis**: 6-node cluster" >> $GITHUB_STEP_SUMMARY

  # Job 6: Notify Teams
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ job.status }}" === "success" ? "good" : "danger",
              "title": "🚀 RAG Platform Deployment",
              "fields": [
                {
                  "title": "Environment",
                  "value": "${{ needs.deploy-production.result == 'success' && 'Production' || 'Staging' }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                  "short": true
                },
                {
                  "title": "Author",
                  "value": "${{ github.actor }}",
                  "short": true
                }
              ]
            }]
          }
    
    - name: 📧 Send email notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: '🚨 RAG Platform Deployment Failed'
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: RAG Platform CI/CD
        body: |
          Deployment failed for RAG Platform.
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          
          Please check the GitHub Actions logs for more details.
          
          Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
